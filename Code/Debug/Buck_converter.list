
Buck_converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c60  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e20  08005e20  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005e20  08005e20  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e20  08005e20  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e20  08005e20  00015e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000003a4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003b4  200003b4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010fcd  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002211  00000000  00000000  00031050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f20  00000000  00000000  00033268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000be6  00000000  00000000  00034188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b7b8  00000000  00000000  00034d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000129bd  00000000  00000000  00050526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a847f  00000000  00000000  00062ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ff8  00000000  00000000  0010b364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0010f35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005dd0 	.word	0x08005dd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005dd0 	.word	0x08005dd0

080001c8 <HAL_GPIO_EXTI_Callback>:
uint8_t state_running = 0;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Push_Button_Pin && state_debounce == 1){
 80001d2:	88fb      	ldrh	r3, [r7, #6]
 80001d4:	2b20      	cmp	r3, #32
 80001d6:	d10a      	bne.n	80001ee <HAL_GPIO_EXTI_Callback+0x26>
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <HAL_GPIO_EXTI_Callback+0x34>)
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d106      	bne.n	80001ee <HAL_GPIO_EXTI_Callback+0x26>
		state_debounce = 0;
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <HAL_GPIO_EXTI_Callback+0x34>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim7);
 80001e6:	4806      	ldr	r0, [pc, #24]	; (8000200 <HAL_GPIO_EXTI_Callback+0x38>)
 80001e8:	f004 f84c 	bl	8004284 <HAL_TIM_Base_Start_IT>
 80001ec:	e001      	b.n	80001f2 <HAL_GPIO_EXTI_Callback+0x2a>
	}
	else{
		__NOP();
 80001ee:	bf00      	nop
	}
}
 80001f0:	bf00      	nop
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000000 	.word	0x20000000
 8000200:	200001f0 	.word	0x200001f0

08000204 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	// for debouncing
	if(htim->Instance == htim7.Instance){
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b34      	ldr	r3, [pc, #208]	; (80002e4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	429a      	cmp	r2, r3
 8000216:	d116      	bne.n	8000246 <HAL_TIM_PeriodElapsedCallback+0x42>
		HAL_TIM_Base_Stop_IT(&htim7);
 8000218:	4832      	ldr	r0, [pc, #200]	; (80002e4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800021a:	f004 f88f 	bl	800433c <HAL_TIM_Base_Stop_IT>
		if(state_running == 0){
 800021e:	4b32      	ldr	r3, [pc, #200]	; (80002e8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d106      	bne.n	8000234 <HAL_TIM_PeriodElapsedCallback+0x30>
			HAL_TIM_Base_Start_IT(&htim2);
 8000226:	4831      	ldr	r0, [pc, #196]	; (80002ec <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000228:	f004 f82c 	bl	8004284 <HAL_TIM_Base_Start_IT>
			state_running = 1;
 800022c:	4b2e      	ldr	r3, [pc, #184]	; (80002e8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800022e:	2201      	movs	r2, #1
 8000230:	701a      	strb	r2, [r3, #0]
 8000232:	e005      	b.n	8000240 <HAL_TIM_PeriodElapsedCallback+0x3c>
		}else{
			HAL_TIM_Base_Stop_IT(&htim2);
 8000234:	482d      	ldr	r0, [pc, #180]	; (80002ec <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000236:	f004 f881 	bl	800433c <HAL_TIM_Base_Stop_IT>
			state_running = 0;
 800023a:	4b2b      	ldr	r3, [pc, #172]	; (80002e8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
		}
		state_debounce = 1;
 8000240:	4b2b      	ldr	r3, [pc, #172]	; (80002f0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
	}
	// run switch cycle
	if(htim->Instance == htim2.Instance){
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	4b28      	ldr	r3, [pc, #160]	; (80002ec <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	429a      	cmp	r2, r3
 8000250:	d10b      	bne.n	800026a <HAL_TIM_PeriodElapsedCallback+0x66>
		HAL_TIM_Base_Start_IT(&htim6);
 8000252:	4828      	ldr	r0, [pc, #160]	; (80002f4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000254:	f004 f816 	bl	8004284 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim16);
 8000258:	4827      	ldr	r0, [pc, #156]	; (80002f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800025a:	f004 f813 	bl	8004284 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim15);
 800025e:	4827      	ldr	r0, [pc, #156]	; (80002fc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000260:	f004 f810 	bl	8004284 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);
 8000264:	4826      	ldr	r0, [pc, #152]	; (8000300 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000266:	f004 f80d 	bl	8004284 <HAL_TIM_Base_Start_IT>
	}
	// high trigger
	if(htim->Instance == htim6.Instance){
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	4b21      	ldr	r3, [pc, #132]	; (80002f4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	429a      	cmp	r2, r3
 8000274:	d107      	bne.n	8000286 <HAL_TIM_PeriodElapsedCallback+0x82>
		HAL_TIM_Base_Stop_IT(&htim6);
 8000276:	481f      	ldr	r0, [pc, #124]	; (80002f4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000278:	f004 f860 	bl	800433c <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(Trigger_OUT_GPIO_Port, Trigger_OUT_Pin, GPIO_PIN_SET);
 800027c:	2201      	movs	r2, #1
 800027e:	2108      	movs	r1, #8
 8000280:	4820      	ldr	r0, [pc, #128]	; (8000304 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000282:	f002 fb89 	bl	8002998 <HAL_GPIO_WritePin>
	}
	// low trigger
	if(htim->Instance == htim15.Instance){
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	4b1c      	ldr	r3, [pc, #112]	; (80002fc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	429a      	cmp	r2, r3
 8000290:	d107      	bne.n	80002a2 <HAL_TIM_PeriodElapsedCallback+0x9e>
		HAL_TIM_Base_Stop_IT(&htim15);
 8000292:	481a      	ldr	r0, [pc, #104]	; (80002fc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000294:	f004 f852 	bl	800433c <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(Trigger_OUT_GPIO_Port, Trigger_OUT_Pin, GPIO_PIN_RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	2108      	movs	r1, #8
 800029c:	4819      	ldr	r0, [pc, #100]	; (8000304 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800029e:	f002 fb7b 	bl	8002998 <HAL_GPIO_WritePin>
	}
	// open mosfet
	if(htim->Instance == htim16.Instance){
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d107      	bne.n	80002be <HAL_TIM_PeriodElapsedCallback+0xba>
		HAL_TIM_Base_Stop_IT(&htim16);
 80002ae:	4812      	ldr	r0, [pc, #72]	; (80002f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80002b0:	f004 f844 	bl	800433c <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(Output_Switch_GPIO_Port, Output_Switch_Pin, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2102      	movs	r1, #2
 80002b8:	4812      	ldr	r0, [pc, #72]	; (8000304 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80002ba:	f002 fb6d 	bl	8002998 <HAL_GPIO_WritePin>
	}
	// close mosfet
	if(htim->Instance == htim17.Instance){
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	429a      	cmp	r2, r3
 80002c8:	d107      	bne.n	80002da <HAL_TIM_PeriodElapsedCallback+0xd6>
		HAL_TIM_Base_Stop_IT(&htim17);
 80002ca:	480d      	ldr	r0, [pc, #52]	; (8000300 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80002cc:	f004 f836 	bl	800433c <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(Output_Switch_GPIO_Port, Output_Switch_Pin, GPIO_PIN_SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2102      	movs	r1, #2
 80002d4:	480b      	ldr	r0, [pc, #44]	; (8000304 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80002d6:	f002 fb5f 	bl	8002998 <HAL_GPIO_WritePin>
	}
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	200001f0 	.word	0x200001f0
 80002e8:	200003ac 	.word	0x200003ac
 80002ec:	2000010c 	.word	0x2000010c
 80002f0:	20000000 	.word	0x20000000
 80002f4:	200001a4 	.word	0x200001a4
 80002f8:	20000288 	.word	0x20000288
 80002fc:	2000023c 	.word	0x2000023c
 8000300:	200002d4 	.word	0x200002d4
 8000304:	48000400 	.word	0x48000400

08000308 <HAL_ADC_ConvCpltCallback>:
uint8_t buf;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	buf = (uint8_t)(((float)(adc_buffer_in >> 5) / 127.0f) * 60.0f + 10.0f);
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <HAL_ADC_ConvCpltCallback+0x54>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	095b      	lsrs	r3, r3, #5
 8000316:	ee07 3a90 	vmov	s15, r3
 800031a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800031e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000360 <HAL_ADC_ConvCpltCallback+0x58>
 8000322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000326:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000364 <HAL_ADC_ConvCpltCallback+0x5c>
 800032a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800032e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000332:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800033a:	edc7 7a00 	vstr	s15, [r7]
 800033e:	783b      	ldrb	r3, [r7, #0]
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <HAL_ADC_ConvCpltCallback+0x60>)
 8000344:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR1 = buf;
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <HAL_ADC_ConvCpltCallback+0x60>)
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	4b08      	ldr	r3, [pc, #32]	; (800036c <HAL_ADC_ConvCpltCallback+0x64>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	200003a8 	.word	0x200003a8
 8000360:	42fe0000 	.word	0x42fe0000
 8000364:	42700000 	.word	0x42700000
 8000368:	200003ad 	.word	0x200003ad
 800036c:	200000c0 	.word	0x200000c0

08000370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000374:	f000 feea 	bl	800114c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000378:	f000 f832 	bl	80003e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037c:	f000 fba0 	bl	8000ac0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000380:	f000 fb80 	bl	8000a84 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000384:	f000 fb4e 	bl	8000a24 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000388:	f000 f8f8 	bl	800057c <MX_TIM1_Init>
  MX_ADC1_Init();
 800038c:	f000 f884 	bl	8000498 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000390:	f000 f9ee 	bl	8000770 <MX_TIM3_Init>
  MX_TIM7_Init();
 8000394:	f000 fa70 	bl	8000878 <MX_TIM7_Init>
  MX_TIM6_Init();
 8000398:	f000 fa38 	bl	800080c <MX_TIM6_Init>
  MX_TIM16_Init();
 800039c:	f000 faf6 	bl	800098c <MX_TIM16_Init>
  MX_TIM2_Init();
 80003a0:	f000 f998 	bl	80006d4 <MX_TIM2_Init>
  MX_TIM15_Init();
 80003a4:	f000 faa0 	bl	80008e8 <MX_TIM15_Init>
  MX_TIM17_Init();
 80003a8:	f000 fb16 	bl	80009d8 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80003ac:	2100      	movs	r1, #0
 80003ae:	4808      	ldr	r0, [pc, #32]	; (80003d0 <main+0x60>)
 80003b0:	f001 f9b2 	bl	8001718 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003b4:	2100      	movs	r1, #0
 80003b6:	4807      	ldr	r0, [pc, #28]	; (80003d4 <main+0x64>)
 80003b8:	f004 f850 	bl	800445c <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, &adc_buffer_in, 1);
 80003bc:	2201      	movs	r2, #1
 80003be:	4906      	ldr	r1, [pc, #24]	; (80003d8 <main+0x68>)
 80003c0:	4803      	ldr	r0, [pc, #12]	; (80003d0 <main+0x60>)
 80003c2:	f001 f8cf 	bl	8001564 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 80003c6:	4805      	ldr	r0, [pc, #20]	; (80003dc <main+0x6c>)
 80003c8:	f003 ff08 	bl	80041dc <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003cc:	e7fe      	b.n	80003cc <main+0x5c>
 80003ce:	bf00      	nop
 80003d0:	2000002c 	.word	0x2000002c
 80003d4:	200000c0 	.word	0x200000c0
 80003d8:	200003a8 	.word	0x200003a8
 80003dc:	20000158 	.word	0x20000158

080003e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b096      	sub	sp, #88	; 0x58
 80003e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003ea:	2228      	movs	r2, #40	; 0x28
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f005 fcc1 	bl	8005d76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	f107 031c 	add.w	r3, r7, #28
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
 8000410:	611a      	str	r2, [r3, #16]
 8000412:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000414:	2302      	movs	r3, #2
 8000416:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000418:	2301      	movs	r3, #1
 800041a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800041c:	2310      	movs	r3, #16
 800041e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000420:	2302      	movs	r3, #2
 8000422:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000424:	2300      	movs	r3, #0
 8000426:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8000428:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800042c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000432:	4618      	mov	r0, r3
 8000434:	f002 fae0 	bl	80029f8 <HAL_RCC_OscConfig>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800043e:	f000 fba3 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000442:	230f      	movs	r3, #15
 8000444:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000446:	2302      	movs	r3, #2
 8000448:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800044e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000452:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000458:	f107 031c 	add.w	r3, r7, #28
 800045c:	2101      	movs	r1, #1
 800045e:	4618      	mov	r0, r3
 8000460:	f003 fb08 	bl	8003a74 <HAL_RCC_ClockConfig>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800046a:	f000 fb8d 	bl	8000b88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 800046e:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000472:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000478:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	4618      	mov	r0, r3
 8000482:	f003 fd2d 	bl	8003ee0 <HAL_RCCEx_PeriphCLKConfig>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800048c:	f000 fb7c 	bl	8000b88 <Error_Handler>
  }
}
 8000490:	bf00      	nop
 8000492:	3758      	adds	r7, #88	; 0x58
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b08a      	sub	sp, #40	; 0x28
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800049e:	f107 031c 	add.w	r3, r7, #28
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
 80004b6:	611a      	str	r2, [r3, #16]
 80004b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004ba:	4b2f      	ldr	r3, [pc, #188]	; (8000578 <MX_ADC1_Init+0xe0>)
 80004bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80004c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004c2:	4b2d      	ldr	r3, [pc, #180]	; (8000578 <MX_ADC1_Init+0xe0>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004c8:	4b2b      	ldr	r3, [pc, #172]	; (8000578 <MX_ADC1_Init+0xe0>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ce:	4b2a      	ldr	r3, [pc, #168]	; (8000578 <MX_ADC1_Init+0xe0>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004d4:	4b28      	ldr	r3, [pc, #160]	; (8000578 <MX_ADC1_Init+0xe0>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004da:	4b27      	ldr	r3, [pc, #156]	; (8000578 <MX_ADC1_Init+0xe0>)
 80004dc:	2200      	movs	r2, #0
 80004de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004e2:	4b25      	ldr	r3, [pc, #148]	; (8000578 <MX_ADC1_Init+0xe0>)
 80004e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80004ea:	4b23      	ldr	r3, [pc, #140]	; (8000578 <MX_ADC1_Init+0xe0>)
 80004ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f2:	4b21      	ldr	r3, [pc, #132]	; (8000578 <MX_ADC1_Init+0xe0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <MX_ADC1_Init+0xe0>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80004fe:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <MX_ADC1_Init+0xe0>)
 8000500:	2201      	movs	r2, #1
 8000502:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000506:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <MX_ADC1_Init+0xe0>)
 8000508:	2204      	movs	r2, #4
 800050a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <MX_ADC1_Init+0xe0>)
 800050e:	2200      	movs	r2, #0
 8000510:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <MX_ADC1_Init+0xe0>)
 8000514:	2200      	movs	r2, #0
 8000516:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000518:	4817      	ldr	r0, [pc, #92]	; (8000578 <MX_ADC1_Init+0xe0>)
 800051a:	f000 fe91 	bl	8001240 <HAL_ADC_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000524:	f000 fb30 	bl	8000b88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000528:	2300      	movs	r3, #0
 800052a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800052c:	f107 031c 	add.w	r3, r7, #28
 8000530:	4619      	mov	r1, r3
 8000532:	4811      	ldr	r0, [pc, #68]	; (8000578 <MX_ADC1_Init+0xe0>)
 8000534:	f001 fc20 	bl	8001d78 <HAL_ADCEx_MultiModeConfigChannel>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800053e:	f000 fb23 	bl	8000b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000542:	2302      	movs	r3, #2
 8000544:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000546:	2301      	movs	r3, #1
 8000548:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800054a:	2300      	movs	r3, #0
 800054c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	4619      	mov	r1, r3
 800055e:	4806      	ldr	r0, [pc, #24]	; (8000578 <MX_ADC1_Init+0xe0>)
 8000560:	f001 f94c 	bl	80017fc <HAL_ADC_ConfigChannel>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800056a:	f000 fb0d 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800056e:	bf00      	nop
 8000570:	3728      	adds	r7, #40	; 0x28
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	2000002c 	.word	0x2000002c

0800057c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b09a      	sub	sp, #104	; 0x68
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000582:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000590:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800059c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
 80005ac:	615a      	str	r2, [r3, #20]
 80005ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	222c      	movs	r2, #44	; 0x2c
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f005 fbdd 	bl	8005d76 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005bc:	4b43      	ldr	r3, [pc, #268]	; (80006cc <MX_TIM1_Init+0x150>)
 80005be:	4a44      	ldr	r2, [pc, #272]	; (80006d0 <MX_TIM1_Init+0x154>)
 80005c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 80005c2:	4b42      	ldr	r3, [pc, #264]	; (80006cc <MX_TIM1_Init+0x150>)
 80005c4:	2204      	movs	r2, #4
 80005c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c8:	4b40      	ldr	r3, [pc, #256]	; (80006cc <MX_TIM1_Init+0x150>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80005ce:	4b3f      	ldr	r3, [pc, #252]	; (80006cc <MX_TIM1_Init+0x150>)
 80005d0:	2263      	movs	r2, #99	; 0x63
 80005d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d4:	4b3d      	ldr	r3, [pc, #244]	; (80006cc <MX_TIM1_Init+0x150>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005da:	4b3c      	ldr	r3, [pc, #240]	; (80006cc <MX_TIM1_Init+0x150>)
 80005dc:	2200      	movs	r2, #0
 80005de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005e0:	4b3a      	ldr	r3, [pc, #232]	; (80006cc <MX_TIM1_Init+0x150>)
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005e6:	4839      	ldr	r0, [pc, #228]	; (80006cc <MX_TIM1_Init+0x150>)
 80005e8:	f003 fda0 	bl	800412c <HAL_TIM_Base_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80005f2:	f000 fac9 	bl	8000b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fa:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000600:	4619      	mov	r1, r3
 8000602:	4832      	ldr	r0, [pc, #200]	; (80006cc <MX_TIM1_Init+0x150>)
 8000604:	f004 fa4a 	bl	8004a9c <HAL_TIM_ConfigClockSource>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800060e:	f000 fabb 	bl	8000b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000612:	482e      	ldr	r0, [pc, #184]	; (80006cc <MX_TIM1_Init+0x150>)
 8000614:	f003 fec1 	bl	800439a <HAL_TIM_PWM_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800061e:	f000 fab3 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000622:	2300      	movs	r3, #0
 8000624:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000626:	2300      	movs	r3, #0
 8000628:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062a:	2300      	movs	r3, #0
 800062c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800062e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000632:	4619      	mov	r1, r3
 8000634:	4825      	ldr	r0, [pc, #148]	; (80006cc <MX_TIM1_Init+0x150>)
 8000636:	f004 ff01 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000640:	f000 faa2 	bl	8000b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000644:	2360      	movs	r3, #96	; 0x60
 8000646:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50-1;
 8000648:	2331      	movs	r3, #49	; 0x31
 800064a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800064c:	2300      	movs	r3, #0
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000650:	2300      	movs	r3, #0
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000654:	2300      	movs	r3, #0
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000658:	2300      	movs	r3, #0
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800065c:	2300      	movs	r3, #0
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000660:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000664:	2200      	movs	r2, #0
 8000666:	4619      	mov	r1, r3
 8000668:	4818      	ldr	r0, [pc, #96]	; (80006cc <MX_TIM1_Init+0x150>)
 800066a:	f004 f903 	bl	8004874 <HAL_TIM_PWM_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000674:	f000 fa88 	bl	8000b88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800068c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000690:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800069a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4619      	mov	r1, r3
 80006ac:	4807      	ldr	r0, [pc, #28]	; (80006cc <MX_TIM1_Init+0x150>)
 80006ae:	f004 ff33 	bl	8005518 <HAL_TIMEx_ConfigBreakDeadTime>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80006b8:	f000 fa66 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <MX_TIM1_Init+0x150>)
 80006be:	f000 fc09 	bl	8000ed4 <HAL_TIM_MspPostInit>

}
 80006c2:	bf00      	nop
 80006c4:	3768      	adds	r7, #104	; 0x68
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000c0 	.word	0x200000c0
 80006d0:	40012c00 	.word	0x40012c00

080006d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_TIM2_Init+0x98>)
 80006f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000-1;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_TIM2_Init+0x98>)
 80006fc:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000700:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_TIM2_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_TIM2_Init+0x98>)
 800070a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800070e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_TIM2_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_TIM2_Init+0x98>)
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800071c:	4813      	ldr	r0, [pc, #76]	; (800076c <MX_TIM2_Init+0x98>)
 800071e:	f003 fd05 	bl	800412c <HAL_TIM_Base_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000728:	f000 fa2e 	bl	8000b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000730:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	4619      	mov	r1, r3
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <MX_TIM2_Init+0x98>)
 800073a:	f004 f9af 	bl	8004a9c <HAL_TIM_ConfigClockSource>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000744:	f000 fa20 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4619      	mov	r1, r3
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_TIM2_Init+0x98>)
 8000756:	f004 fe71 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000760:	f000 fa12 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000010c 	.word	0x2000010c

08000770 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_TIM3_Init+0x94>)
 8000790:	4a1d      	ldr	r2, [pc, #116]	; (8000808 <MX_TIM3_Init+0x98>)
 8000792:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40000-1;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_TIM3_Init+0x94>)
 8000796:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800079a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_TIM3_Init+0x94>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_TIM3_Init+0x94>)
 80007a4:	2209      	movs	r2, #9
 80007a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_TIM3_Init+0x94>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_TIM3_Init+0x94>)
 80007b0:	2280      	movs	r2, #128	; 0x80
 80007b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007b4:	4813      	ldr	r0, [pc, #76]	; (8000804 <MX_TIM3_Init+0x94>)
 80007b6:	f003 fcb9 	bl	800412c <HAL_TIM_Base_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007c0:	f000 f9e2 	bl	8000b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	4619      	mov	r1, r3
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <MX_TIM3_Init+0x94>)
 80007d2:	f004 f963 	bl	8004a9c <HAL_TIM_ConfigClockSource>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80007dc:	f000 f9d4 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007e0:	2320      	movs	r3, #32
 80007e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_TIM3_Init+0x94>)
 80007ee:	f004 fe25 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80007f8:	f000 f9c6 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000158 	.word	0x20000158
 8000808:	40000400 	.word	0x40000400

0800080c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_TIM6_Init+0x64>)
 800081e:	4a15      	ldr	r2, [pc, #84]	; (8000874 <MX_TIM6_Init+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40000-1;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_TIM6_Init+0x64>)
 8000824:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000828:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_TIM6_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4-1;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_TIM6_Init+0x64>)
 8000832:	2203      	movs	r2, #3
 8000834:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_TIM6_Init+0x64>)
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_TIM6_Init+0x64>)
 800083e:	f003 fc75 	bl	800412c <HAL_TIM_Base_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000848:	f000 f99e 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_TIM6_Init+0x64>)
 800085a:	f004 fdef 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000864:	f000 f990 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200001a4 	.word	0x200001a4
 8000874:	40001000 	.word	0x40001000

08000878 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_TIM7_Init+0x68>)
 800088a:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <MX_TIM7_Init+0x6c>)
 800088c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40000-1;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_TIM7_Init+0x68>)
 8000890:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000894:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_TIM7_Init+0x68>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_TIM7_Init+0x68>)
 800089e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008a2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_TIM7_Init+0x68>)
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80008aa:	480d      	ldr	r0, [pc, #52]	; (80008e0 <MX_TIM7_Init+0x68>)
 80008ac:	f003 fc3e 	bl	800412c <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80008b6:	f000 f967 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	4619      	mov	r1, r3
 80008c6:	4806      	ldr	r0, [pc, #24]	; (80008e0 <MX_TIM7_Init+0x68>)
 80008c8:	f004 fdb8 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80008d2:	f000 f959 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200001f0 	.word	0x200001f0
 80008e4:	40001400 	.word	0x40001400

080008e8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <MX_TIM15_Init+0x9c>)
 8000908:	4a1f      	ldr	r2, [pc, #124]	; (8000988 <MX_TIM15_Init+0xa0>)
 800090a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 40000-1;
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_TIM15_Init+0x9c>)
 800090e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000912:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_TIM15_Init+0x9c>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 8-1;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_TIM15_Init+0x9c>)
 800091c:	2207      	movs	r2, #7
 800091e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_TIM15_Init+0x9c>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_TIM15_Init+0x9c>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_TIM15_Init+0x9c>)
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000932:	4814      	ldr	r0, [pc, #80]	; (8000984 <MX_TIM15_Init+0x9c>)
 8000934:	f003 fbfa 	bl	800412c <HAL_TIM_Base_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800093e:	f000 f923 	bl	8000b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000946:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	4619      	mov	r1, r3
 800094e:	480d      	ldr	r0, [pc, #52]	; (8000984 <MX_TIM15_Init+0x9c>)
 8000950:	f004 f8a4 	bl	8004a9c <HAL_TIM_ConfigClockSource>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800095a:	f000 f915 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	4619      	mov	r1, r3
 800096a:	4806      	ldr	r0, [pc, #24]	; (8000984 <MX_TIM15_Init+0x9c>)
 800096c:	f004 fd66 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000976:	f000 f907 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	3720      	adds	r7, #32
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000023c 	.word	0x2000023c
 8000988:	40014000 	.word	0x40014000

0800098c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_TIM16_Init+0x44>)
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <MX_TIM16_Init+0x48>)
 8000994:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 40000-1;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_TIM16_Init+0x44>)
 8000998:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800099c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_TIM16_Init+0x44>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2-1;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_TIM16_Init+0x44>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_TIM16_Init+0x44>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_TIM16_Init+0x44>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_TIM16_Init+0x44>)
 80009b8:	2280      	movs	r2, #128	; 0x80
 80009ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_TIM16_Init+0x44>)
 80009be:	f003 fbb5 	bl	800412c <HAL_TIM_Base_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80009c8:	f000 f8de 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000288 	.word	0x20000288
 80009d4:	40014400 	.word	0x40014400

080009d8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_TIM17_Init+0x44>)
 80009de:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <MX_TIM17_Init+0x48>)
 80009e0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 40000-1;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_TIM17_Init+0x44>)
 80009e4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80009e8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_TIM17_Init+0x44>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 4-1;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <MX_TIM17_Init+0x44>)
 80009f2:	2203      	movs	r2, #3
 80009f4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_TIM17_Init+0x44>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <MX_TIM17_Init+0x44>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_TIM17_Init+0x44>)
 8000a04:	2280      	movs	r2, #128	; 0x80
 8000a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_TIM17_Init+0x44>)
 8000a0a:	f003 fb8f 	bl	800412c <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000a14:	f000 f8b8 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200002d4 	.word	0x200002d4
 8000a20:	40014800 	.word	0x40014800

08000a24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a2a:	4a15      	ldr	r2, [pc, #84]	; (8000a80 <MX_USART2_UART_Init+0x5c>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a30:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000a34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_USART2_UART_Init+0x58>)
 8000a68:	f004 fdec 	bl	8005644 <HAL_UART_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a72:	f000 f889 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000320 	.word	0x20000320
 8000a80:	40004400 	.word	0x40004400

08000a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_DMA_Init+0x38>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <MX_DMA_Init+0x38>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6153      	str	r3, [r2, #20]
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_DMA_Init+0x38>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 13, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	210d      	movs	r1, #13
 8000aa6:	200b      	movs	r0, #11
 8000aa8:	f001 fc37 	bl	800231a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000aac:	200b      	movs	r0, #11
 8000aae:	f001 fc50 	bl	8002352 <HAL_NVIC_EnableIRQ>

}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad6:	4b2a      	ldr	r3, [pc, #168]	; (8000b80 <MX_GPIO_Init+0xc0>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	4a29      	ldr	r2, [pc, #164]	; (8000b80 <MX_GPIO_Init+0xc0>)
 8000adc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ae0:	6153      	str	r3, [r2, #20]
 8000ae2:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <MX_GPIO_Init+0xc0>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <MX_GPIO_Init+0xc0>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	4a23      	ldr	r2, [pc, #140]	; (8000b80 <MX_GPIO_Init+0xc0>)
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	6153      	str	r3, [r2, #20]
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_GPIO_Init+0xc0>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <MX_GPIO_Init+0xc0>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <MX_GPIO_Init+0xc0>)
 8000b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b10:	6153      	str	r3, [r2, #20]
 8000b12:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <MX_GPIO_Init+0xc0>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Output_Switch_GPIO_Port, Output_Switch_Pin, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2102      	movs	r1, #2
 8000b22:	4818      	ldr	r0, [pc, #96]	; (8000b84 <MX_GPIO_Init+0xc4>)
 8000b24:	f001 ff38 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_OUT_GPIO_Port, Trigger_OUT_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2108      	movs	r1, #8
 8000b2c:	4815      	ldr	r0, [pc, #84]	; (8000b84 <MX_GPIO_Init+0xc4>)
 8000b2e:	f001 ff33 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Output_Switch_Pin Trigger_OUT_Pin */
  GPIO_InitStruct.Pin = Output_Switch_Pin|Trigger_OUT_Pin;
 8000b32:	230a      	movs	r3, #10
 8000b34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4619      	mov	r1, r3
 8000b48:	480e      	ldr	r0, [pc, #56]	; (8000b84 <MX_GPIO_Init+0xc4>)
 8000b4a:	f001 fdb3 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Push_Button_Pin */
  GPIO_InitStruct.Pin = Push_Button_Pin;
 8000b4e:	2320      	movs	r3, #32
 8000b50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Push_Button_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	4619      	mov	r1, r3
 8000b62:	4808      	ldr	r0, [pc, #32]	; (8000b84 <MX_GPIO_Init+0xc4>)
 8000b64:	f001 fda6 	bl	80026b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 14, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	210e      	movs	r1, #14
 8000b6c:	2017      	movs	r0, #23
 8000b6e:	f001 fbd4 	bl	800231a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b72:	2017      	movs	r0, #23
 8000b74:	f001 fbed 	bl	8002352 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b78:	bf00      	nop
 8000b7a:	3720      	adds	r7, #32
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40021000 	.word	0x40021000
 8000b84:	48000400 	.word	0x48000400

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <Error_Handler+0x8>
	...

08000b94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <HAL_MspInit+0x88>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <HAL_MspInit+0x88>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6193      	str	r3, [r2, #24]
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <HAL_MspInit+0x88>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <HAL_MspInit+0x88>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	4a19      	ldr	r2, [pc, #100]	; (8000c1c <HAL_MspInit+0x88>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	61d3      	str	r3, [r2, #28]
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HAL_MspInit+0x88>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	210f      	movs	r1, #15
 8000bce:	f06f 000b 	mvn.w	r0, #11
 8000bd2:	f001 fba2 	bl	800231a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 15, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	210f      	movs	r1, #15
 8000bda:	f06f 000a 	mvn.w	r0, #10
 8000bde:	f001 fb9c 	bl	800231a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 15, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	210f      	movs	r1, #15
 8000be6:	f06f 0009 	mvn.w	r0, #9
 8000bea:	f001 fb96 	bl	800231a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	210f      	movs	r1, #15
 8000bf2:	f06f 0004 	mvn.w	r0, #4
 8000bf6:	f001 fb90 	bl	800231a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	210f      	movs	r1, #15
 8000bfe:	f06f 0003 	mvn.w	r0, #3
 8000c02:	f001 fb8a 	bl	800231a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	210f      	movs	r1, #15
 8000c0a:	f06f 0001 	mvn.w	r0, #1
 8000c0e:	f001 fb84 	bl	800231a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000

08000c20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c40:	d14d      	bne.n	8000cde <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c42:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <HAL_ADC_MspInit+0xc8>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	4a28      	ldr	r2, [pc, #160]	; (8000ce8 <HAL_ADC_MspInit+0xc8>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	6153      	str	r3, [r2, #20]
 8000c4e:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <HAL_ADC_MspInit+0xc8>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <HAL_ADC_MspInit+0xc8>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	4a22      	ldr	r2, [pc, #136]	; (8000ce8 <HAL_ADC_MspInit+0xc8>)
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	6153      	str	r3, [r2, #20]
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <HAL_ADC_MspInit+0xc8>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Pot_in_Pin;
 8000c72:	2302      	movs	r3, #2
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c76:	2303      	movs	r3, #3
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Pot_in_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c88:	f001 fd14 	bl	80026b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_ADC_MspInit+0xcc>)
 8000c8e:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <HAL_ADC_MspInit+0xd0>)
 8000c90:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_ADC_MspInit+0xcc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_ADC_MspInit+0xcc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <HAL_ADC_MspInit+0xcc>)
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_ADC_MspInit+0xcc>)
 8000ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000caa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_ADC_MspInit+0xcc>)
 8000cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cb2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_ADC_MspInit+0xcc>)
 8000cb6:	2220      	movs	r2, #32
 8000cb8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <HAL_ADC_MspInit+0xcc>)
 8000cbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cc0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cc2:	480a      	ldr	r0, [pc, #40]	; (8000cec <HAL_ADC_MspInit+0xcc>)
 8000cc4:	f001 fb5f 	bl	8002386 <HAL_DMA_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000cce:	f7ff ff5b 	bl	8000b88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a05      	ldr	r2, [pc, #20]	; (8000cec <HAL_ADC_MspInit+0xcc>)
 8000cd6:	639a      	str	r2, [r3, #56]	; 0x38
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_ADC_MspInit+0xcc>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	; 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	2000007c 	.word	0x2000007c
 8000cf0:	40020008 	.word	0x40020008

08000cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a6c      	ldr	r2, [pc, #432]	; (8000eb4 <HAL_TIM_Base_MspInit+0x1c0>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d124      	bne.n	8000d50 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d06:	4b6c      	ldr	r3, [pc, #432]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	4a6b      	ldr	r2, [pc, #428]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000d0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d10:	6193      	str	r3, [r2, #24]
 8000d12:	4b69      	ldr	r3, [pc, #420]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 14, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	210e      	movs	r1, #14
 8000d22:	2018      	movs	r0, #24
 8000d24:	f001 faf9 	bl	800231a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000d28:	2018      	movs	r0, #24
 8000d2a:	f001 fb12 	bl	8002352 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 14, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	210e      	movs	r1, #14
 8000d32:	2019      	movs	r0, #25
 8000d34:	f001 faf1 	bl	800231a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d38:	2019      	movs	r0, #25
 8000d3a:	f001 fb0a 	bl	8002352 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 14, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	210e      	movs	r1, #14
 8000d42:	201a      	movs	r0, #26
 8000d44:	f001 fae9 	bl	800231a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000d48:	201a      	movs	r0, #26
 8000d4a:	f001 fb02 	bl	8002352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000d4e:	e0ac      	b.n	8000eaa <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM2)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d58:	d114      	bne.n	8000d84 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d5a:	4b57      	ldr	r3, [pc, #348]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	4a56      	ldr	r2, [pc, #344]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	61d3      	str	r3, [r2, #28]
 8000d66:	4b54      	ldr	r3, [pc, #336]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	623b      	str	r3, [r7, #32]
 8000d70:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 14, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	210e      	movs	r1, #14
 8000d76:	201c      	movs	r0, #28
 8000d78:	f001 facf 	bl	800231a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d7c:	201c      	movs	r0, #28
 8000d7e:	f001 fae8 	bl	8002352 <HAL_NVIC_EnableIRQ>
}
 8000d82:	e092      	b.n	8000eaa <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM3)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a4c      	ldr	r2, [pc, #304]	; (8000ebc <HAL_TIM_Base_MspInit+0x1c8>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d10c      	bne.n	8000da8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d8e:	4b4a      	ldr	r3, [pc, #296]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	4a49      	ldr	r2, [pc, #292]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	61d3      	str	r3, [r2, #28]
 8000d9a:	4b47      	ldr	r3, [pc, #284]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	69fb      	ldr	r3, [r7, #28]
}
 8000da6:	e080      	b.n	8000eaa <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM6)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a44      	ldr	r2, [pc, #272]	; (8000ec0 <HAL_TIM_Base_MspInit+0x1cc>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d114      	bne.n	8000ddc <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000db2:	4b41      	ldr	r3, [pc, #260]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	4a40      	ldr	r2, [pc, #256]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000db8:	f043 0310 	orr.w	r3, r3, #16
 8000dbc:	61d3      	str	r3, [r2, #28]
 8000dbe:	4b3e      	ldr	r3, [pc, #248]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	f003 0310 	and.w	r3, r3, #16
 8000dc6:	61bb      	str	r3, [r7, #24]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 14, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	210e      	movs	r1, #14
 8000dce:	2036      	movs	r0, #54	; 0x36
 8000dd0:	f001 faa3 	bl	800231a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000dd4:	2036      	movs	r0, #54	; 0x36
 8000dd6:	f001 fabc 	bl	8002352 <HAL_NVIC_EnableIRQ>
}
 8000dda:	e066      	b.n	8000eaa <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM7)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a38      	ldr	r2, [pc, #224]	; (8000ec4 <HAL_TIM_Base_MspInit+0x1d0>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d114      	bne.n	8000e10 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000de6:	4b34      	ldr	r3, [pc, #208]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a33      	ldr	r2, [pc, #204]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000dec:	f043 0320 	orr.w	r3, r3, #32
 8000df0:	61d3      	str	r3, [r2, #28]
 8000df2:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 0320 	and.w	r3, r3, #32
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 14, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	210e      	movs	r1, #14
 8000e02:	2037      	movs	r0, #55	; 0x37
 8000e04:	f001 fa89 	bl	800231a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8000e08:	2037      	movs	r0, #55	; 0x37
 8000e0a:	f001 faa2 	bl	8002352 <HAL_NVIC_EnableIRQ>
}
 8000e0e:	e04c      	b.n	8000eaa <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM15)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a2c      	ldr	r2, [pc, #176]	; (8000ec8 <HAL_TIM_Base_MspInit+0x1d4>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d114      	bne.n	8000e44 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000e1a:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	4a26      	ldr	r2, [pc, #152]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e24:	6193      	str	r3, [r2, #24]
 8000e26:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 14, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	210e      	movs	r1, #14
 8000e36:	2018      	movs	r0, #24
 8000e38:	f001 fa6f 	bl	800231a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000e3c:	2018      	movs	r0, #24
 8000e3e:	f001 fa88 	bl	8002352 <HAL_NVIC_EnableIRQ>
}
 8000e42:	e032      	b.n	8000eaa <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM16)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <HAL_TIM_Base_MspInit+0x1d8>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d114      	bne.n	8000e78 <HAL_TIM_Base_MspInit+0x184>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	4a19      	ldr	r2, [pc, #100]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e58:	6193      	str	r3, [r2, #24]
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 14, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	210e      	movs	r1, #14
 8000e6a:	2019      	movs	r0, #25
 8000e6c:	f001 fa55 	bl	800231a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e70:	2019      	movs	r0, #25
 8000e72:	f001 fa6e 	bl	8002352 <HAL_NVIC_EnableIRQ>
}
 8000e76:	e018      	b.n	8000eaa <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM17)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <HAL_TIM_Base_MspInit+0x1dc>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d113      	bne.n	8000eaa <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8c:	6193      	str	r3, [r2, #24]
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_TIM_Base_MspInit+0x1c4>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 14, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	210e      	movs	r1, #14
 8000e9e:	201a      	movs	r0, #26
 8000ea0:	f001 fa3b 	bl	800231a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000ea4:	201a      	movs	r0, #26
 8000ea6:	f001 fa54 	bl	8002352 <HAL_NVIC_EnableIRQ>
}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40012c00 	.word	0x40012c00
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40000400 	.word	0x40000400
 8000ec0:	40001000 	.word	0x40001000
 8000ec4:	40001400 	.word	0x40001400
 8000ec8:	40014000 	.word	0x40014000
 8000ecc:	40014400 	.word	0x40014400
 8000ed0:	40014800 	.word	0x40014800

08000ed4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <HAL_TIM_MspPostInit+0x68>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d11d      	bne.n	8000f32 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_TIM_MspPostInit+0x6c>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	4a11      	ldr	r2, [pc, #68]	; (8000f40 <HAL_TIM_MspPostInit+0x6c>)
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	6153      	str	r3, [r2, #20]
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_TIM_MspPostInit+0x6c>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Buck_Clk_Pin;
 8000f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f20:	2306      	movs	r3, #6
 8000f22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buck_Clk_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2e:	f001 fbc1 	bl	80026b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f32:	bf00      	nop
 8000f34:	3720      	adds	r7, #32
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40012c00 	.word	0x40012c00
 8000f40:	40021000 	.word	0x40021000

08000f44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a18      	ldr	r2, [pc, #96]	; (8000fc4 <HAL_UART_MspInit+0x80>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d129      	bne.n	8000fba <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <HAL_UART_MspInit+0x84>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <HAL_UART_MspInit+0x84>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	61d3      	str	r3, [r2, #28]
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_UART_MspInit+0x84>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_UART_MspInit+0x84>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	4a11      	ldr	r2, [pc, #68]	; (8000fc8 <HAL_UART_MspInit+0x84>)
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	6153      	str	r3, [r2, #20]
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <HAL_UART_MspInit+0x84>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000f96:	f248 0304 	movw	r3, #32772	; 0x8004
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fa8:	2307      	movs	r3, #7
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb6:	f001 fb7d 	bl	80026b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40004400 	.word	0x40004400
 8000fc8:	40021000 	.word	0x40021000

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <MemManage_Handler+0x4>

08000fde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001018:	f000 f8de 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <DMA1_Channel1_IRQHandler+0x10>)
 8001026:	f001 fa54 	bl	80024d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000007c 	.word	0x2000007c

08001034 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Push_Button_Pin);
 8001038:	2020      	movs	r0, #32
 800103a:	f001 fcc5 	bl	80029c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001048:	4803      	ldr	r0, [pc, #12]	; (8001058 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800104a:	f003 faf3 	bl	8004634 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800104e:	4803      	ldr	r0, [pc, #12]	; (800105c <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001050:	f003 faf0 	bl	8004634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200000c0 	.word	0x200000c0
 800105c:	2000023c 	.word	0x2000023c

08001060 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001064:	4803      	ldr	r0, [pc, #12]	; (8001074 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001066:	f003 fae5 	bl	8004634 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800106c:	f003 fae2 	bl	8004634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200000c0 	.word	0x200000c0
 8001078:	20000288 	.word	0x20000288

0800107c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001082:	f003 fad7 	bl	8004634 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001086:	4803      	ldr	r0, [pc, #12]	; (8001094 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001088:	f003 fad4 	bl	8004634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200000c0 	.word	0x200000c0
 8001094:	200002d4 	.word	0x200002d4

08001098 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <TIM2_IRQHandler+0x10>)
 800109e:	f003 fac9 	bl	8004634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000010c 	.word	0x2000010c

080010ac <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <TIM6_DAC1_IRQHandler+0x10>)
 80010b2:	f003 fabf 	bl	8004634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200001a4 	.word	0x200001a4

080010c0 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <TIM7_DAC2_IRQHandler+0x10>)
 80010c6:	f003 fab5 	bl	8004634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200001f0 	.word	0x200001f0

080010d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <SystemInit+0x20>)
 80010da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <SystemInit+0x20>)
 80010e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001130 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010fc:	f7ff ffea 	bl	80010d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001100:	480c      	ldr	r0, [pc, #48]	; (8001134 <LoopForever+0x6>)
  ldr r1, =_edata
 8001102:	490d      	ldr	r1, [pc, #52]	; (8001138 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <LoopForever+0xe>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001118:	4c0a      	ldr	r4, [pc, #40]	; (8001144 <LoopForever+0x16>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001126:	f004 fe2f 	bl	8005d88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800112a:	f7ff f921 	bl	8000370 <main>

0800112e <LoopForever>:

LoopForever:
    b LoopForever
 800112e:	e7fe      	b.n	800112e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001130:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001138:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800113c:	08005e28 	.word	0x08005e28
  ldr r2, =_sbss
 8001140:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001144:	200003b4 	.word	0x200003b4

08001148 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC1_2_IRQHandler>
	...

0800114c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_Init+0x28>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a07      	ldr	r2, [pc, #28]	; (8001174 <HAL_Init+0x28>)
 8001156:	f043 0310 	orr.w	r3, r3, #16
 800115a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
 800115e:	f001 f8d1 	bl	8002304 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001162:	2000      	movs	r0, #0
 8001164:	f000 f808 	bl	8001178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001168:	f7ff fd14 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40022000 	.word	0x40022000

08001178 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_InitTick+0x54>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_InitTick+0x58>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f001 f8e9 	bl	800236e <HAL_SYSTICK_Config>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d80a      	bhi.n	80011c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ac:	2200      	movs	r2, #0
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f001 f8b1 	bl	800231a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <HAL_InitTick+0x5c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000004 	.word	0x20000004
 80011d0:	2000000c 	.word	0x2000000c
 80011d4:	20000008 	.word	0x20000008

080011d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x20>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x24>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <HAL_IncTick+0x24>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	2000000c 	.word	0x2000000c
 80011fc:	200003b0 	.word	0x200003b0

08001200 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;  
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_GetTick+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	200003b0 	.word	0x200003b0

08001218 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b09a      	sub	sp, #104	; 0x68
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e172      	b.n	8001546 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	2b00      	cmp	r3, #0
 8001270:	d176      	bne.n	8001360 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	2b00      	cmp	r3, #0
 8001278:	d152      	bne.n	8001320 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff fcc3 	bl	8000c20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d13b      	bne.n	8001320 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 fef5 	bl	8002098 <ADC_Disable>
 80012ae:	4603      	mov	r3, r0
 80012b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d12f      	bne.n	8001320 <HAL_ADC_Init+0xe0>
 80012c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d12b      	bne.n	8001320 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012d0:	f023 0302 	bic.w	r3, r3, #2
 80012d4:	f043 0202 	orr.w	r2, r3, #2
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012ea:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012fa:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012fc:	4b94      	ldr	r3, [pc, #592]	; (8001550 <HAL_ADC_Init+0x310>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a94      	ldr	r2, [pc, #592]	; (8001554 <HAL_ADC_Init+0x314>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	0c9a      	lsrs	r2, r3, #18
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001312:	e002      	b.n	800131a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	3b01      	subs	r3, #1
 8001318:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f9      	bne.n	8001314 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d007      	beq.n	800133e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800133c:	d110      	bne.n	8001360 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f023 0312 	bic.w	r3, r3, #18
 8001346:	f043 0210 	orr.w	r2, r3, #16
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f043 0201 	orr.w	r2, r3, #1
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	f003 0310 	and.w	r3, r3, #16
 8001368:	2b00      	cmp	r3, #0
 800136a:	f040 80df 	bne.w	800152c <HAL_ADC_Init+0x2ec>
 800136e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001372:	2b00      	cmp	r3, #0
 8001374:	f040 80da 	bne.w	800152c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001382:	2b00      	cmp	r3, #0
 8001384:	f040 80d2 	bne.w	800152c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001390:	f043 0202 	orr.w	r2, r3, #2
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001398:	4b6f      	ldr	r3, [pc, #444]	; (8001558 <HAL_ADC_Init+0x318>)
 800139a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013a4:	d102      	bne.n	80013ac <HAL_ADC_Init+0x16c>
 80013a6:	4b6d      	ldr	r3, [pc, #436]	; (800155c <HAL_ADC_Init+0x31c>)
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e002      	b.n	80013b2 <HAL_ADC_Init+0x172>
 80013ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013b0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d108      	bne.n	80013d2 <HAL_ADC_Init+0x192>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d101      	bne.n	80013d2 <HAL_ADC_Init+0x192>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <HAL_ADC_Init+0x194>
 80013d2:	2300      	movs	r3, #0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d11c      	bne.n	8001412 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013d8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d010      	beq.n	8001400 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d107      	bne.n	80013fa <HAL_ADC_Init+0x1ba>
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d101      	bne.n	80013fa <HAL_ADC_Init+0x1ba>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_ADC_Init+0x1bc>
 80013fa:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d108      	bne.n	8001412 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	431a      	orrs	r2, r3
 800140e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001410:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7e5b      	ldrb	r3, [r3, #25]
 8001416:	035b      	lsls	r3, r3, #13
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800141c:	2a01      	cmp	r2, #1
 800141e:	d002      	beq.n	8001426 <HAL_ADC_Init+0x1e6>
 8001420:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001424:	e000      	b.n	8001428 <HAL_ADC_Init+0x1e8>
 8001426:	2200      	movs	r2, #0
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	4313      	orrs	r3, r2
 8001436:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001438:	4313      	orrs	r3, r2
 800143a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d11b      	bne.n	800147e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7e5b      	ldrb	r3, [r3, #25]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d109      	bne.n	8001462 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	3b01      	subs	r3, #1
 8001454:	045a      	lsls	r2, r3, #17
 8001456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001458:	4313      	orrs	r3, r2
 800145a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145e:	663b      	str	r3, [r7, #96]	; 0x60
 8001460:	e00d      	b.n	800147e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800146a:	f043 0220 	orr.w	r2, r3, #32
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f043 0201 	orr.w	r2, r3, #1
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001482:	2b01      	cmp	r3, #1
 8001484:	d007      	beq.n	8001496 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148e:	4313      	orrs	r3, r2
 8001490:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001492:	4313      	orrs	r3, r2
 8001494:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d114      	bne.n	80014ce <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014b2:	f023 0302 	bic.w	r3, r3, #2
 80014b6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7e1b      	ldrb	r3, [r3, #24]
 80014bc:	039a      	lsls	r2, r3, #14
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4313      	orrs	r3, r2
 80014c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014ca:	4313      	orrs	r3, r2
 80014cc:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <HAL_ADC_Init+0x320>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80014de:	430b      	orrs	r3, r1
 80014e0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d10c      	bne.n	8001504 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	f023 010f 	bic.w	r1, r3, #15
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	1e5a      	subs	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
 8001502:	e007      	b.n	8001514 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 020f 	bic.w	r2, r2, #15
 8001512:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f023 0303 	bic.w	r3, r3, #3
 8001522:	f043 0201 	orr.w	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	641a      	str	r2, [r3, #64]	; 0x40
 800152a:	e00a      	b.n	8001542 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f023 0312 	bic.w	r3, r3, #18
 8001534:	f043 0210 	orr.w	r2, r3, #16
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800153c:	2301      	movs	r3, #1
 800153e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001542:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001546:	4618      	mov	r0, r3
 8001548:	3768      	adds	r7, #104	; 0x68
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000004 	.word	0x20000004
 8001554:	431bde83 	.word	0x431bde83
 8001558:	50000300 	.word	0x50000300
 800155c:	50000100 	.word	0x50000100
 8001560:	fff0c007 	.word	0xfff0c007

08001564 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	f040 80b9 	bne.w	80016f6 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800158a:	2b01      	cmp	r3, #1
 800158c:	d101      	bne.n	8001592 <HAL_ADC_Start_DMA+0x2e>
 800158e:	2302      	movs	r3, #2
 8001590:	e0b4      	b.n	80016fc <HAL_ADC_Start_DMA+0x198>
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800159a:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <HAL_ADC_Start_DMA+0x1a0>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 031f 	and.w	r3, r3, #31
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f040 80a0 	bne.w	80016e8 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f000 fd11 	bl	8001fd0 <ADC_Enable>
 80015ae:	4603      	mov	r3, r0
 80015b0:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f040 8092 	bne.w	80016de <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015c2:	f023 0301 	bic.w	r3, r3, #1
 80015c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015ce:	4b4d      	ldr	r3, [pc, #308]	; (8001704 <HAL_ADC_Start_DMA+0x1a0>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 031f 	and.w	r3, r3, #31
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d004      	beq.n	80015e4 <HAL_ADC_Start_DMA+0x80>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015e2:	d115      	bne.n	8001610 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d027      	beq.n	800164e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001606:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800160e:	e01e      	b.n	800164e <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001624:	d004      	beq.n	8001630 <HAL_ADC_Start_DMA+0xcc>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a37      	ldr	r2, [pc, #220]	; (8001708 <HAL_ADC_Start_DMA+0x1a4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d10e      	bne.n	800164e <HAL_ADC_Start_DMA+0xea>
 8001630:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d007      	beq.n	800164e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001646:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800165a:	d106      	bne.n	800166a <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001660:	f023 0206 	bic.w	r2, r3, #6
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	645a      	str	r2, [r3, #68]	; 0x44
 8001668:	e002      	b.n	8001670 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167c:	4a23      	ldr	r2, [pc, #140]	; (800170c <HAL_ADC_Start_DMA+0x1a8>)
 800167e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001684:	4a22      	ldr	r2, [pc, #136]	; (8001710 <HAL_ADC_Start_DMA+0x1ac>)
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168c:	4a21      	ldr	r2, [pc, #132]	; (8001714 <HAL_ADC_Start_DMA+0x1b0>)
 800168e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	221c      	movs	r2, #28
 8001696:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0210 	orr.w	r2, r2, #16
 80016a6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3340      	adds	r3, #64	; 0x40
 80016c2:	4619      	mov	r1, r3
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f000 fea4 	bl	8002414 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0204 	orr.w	r2, r2, #4
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	e00d      	b.n	80016fa <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80016e6:	e008      	b.n	80016fa <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80016f4:	e001      	b.n	80016fa <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016f6:	2302      	movs	r3, #2
 80016f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	50000300 	.word	0x50000300
 8001708:	50000100 	.word	0x50000100
 800170c:	08001f05 	.word	0x08001f05
 8001710:	08001f7f 	.word	0x08001f7f
 8001714:	08001f9b 	.word	0x08001f9b

08001718 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <HAL_ADCEx_Calibration_Start+0x1c>
 8001730:	2302      	movs	r3, #2
 8001732:	e05f      	b.n	80017f4 <HAL_ADCEx_Calibration_Start+0xdc>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 fcab 	bl	8002098 <ADC_Disable>
 8001742:	4603      	mov	r3, r0
 8001744:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d14e      	bne.n	80017ea <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001760:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d107      	bne.n	8001778 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001776:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001786:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001788:	f7ff fd3a 	bl	8001200 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800178e:	e01c      	b.n	80017ca <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001790:	f7ff fd36 	bl	8001200 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b0a      	cmp	r3, #10
 800179c:	d915      	bls.n	80017ca <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017ac:	d10d      	bne.n	80017ca <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f023 0312 	bic.w	r3, r3, #18
 80017b6:	f043 0210 	orr.w	r2, r3, #16
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e014      	b.n	80017f4 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017d8:	d0da      	beq.n	8001790 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f023 0303 	bic.w	r3, r3, #3
 80017e2:	f043 0201 	orr.w	r2, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b09b      	sub	sp, #108	; 0x6c
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001816:	2b01      	cmp	r3, #1
 8001818:	d101      	bne.n	800181e <HAL_ADC_ConfigChannel+0x22>
 800181a:	2302      	movs	r3, #2
 800181c:	e2a1      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x566>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	f040 8285 	bne.w	8001d40 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b04      	cmp	r3, #4
 800183c:	d81c      	bhi.n	8001878 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	461a      	mov	r2, r3
 8001852:	231f      	movs	r3, #31
 8001854:	4093      	lsls	r3, r2
 8001856:	43db      	mvns	r3, r3
 8001858:	4019      	ands	r1, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	fa00 f203 	lsl.w	r2, r0, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	631a      	str	r2, [r3, #48]	; 0x30
 8001876:	e063      	b.n	8001940 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b09      	cmp	r3, #9
 800187e:	d81e      	bhi.n	80018be <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	3b1e      	subs	r3, #30
 8001894:	221f      	movs	r2, #31
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	4019      	ands	r1, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	3b1e      	subs	r3, #30
 80018b0:	fa00 f203 	lsl.w	r2, r0, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	635a      	str	r2, [r3, #52]	; 0x34
 80018bc:	e040      	b.n	8001940 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b0e      	cmp	r3, #14
 80018c4:	d81e      	bhi.n	8001904 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	3b3c      	subs	r3, #60	; 0x3c
 80018da:	221f      	movs	r2, #31
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	4019      	ands	r1, r3
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	3b3c      	subs	r3, #60	; 0x3c
 80018f6:	fa00 f203 	lsl.w	r2, r0, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	639a      	str	r2, [r3, #56]	; 0x38
 8001902:	e01d      	b.n	8001940 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	3b5a      	subs	r3, #90	; 0x5a
 8001918:	221f      	movs	r2, #31
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	4019      	ands	r1, r3
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4413      	add	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	3b5a      	subs	r3, #90	; 0x5a
 8001934:	fa00 f203 	lsl.w	r2, r0, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 80e5 	bne.w	8001b1a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b09      	cmp	r3, #9
 8001956:	d91c      	bls.n	8001992 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6999      	ldr	r1, [r3, #24]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	3b1e      	subs	r3, #30
 800196a:	2207      	movs	r2, #7
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	4019      	ands	r1, r3
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	6898      	ldr	r0, [r3, #8]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	3b1e      	subs	r3, #30
 8001984:	fa00 f203 	lsl.w	r2, r0, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	619a      	str	r2, [r3, #24]
 8001990:	e019      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6959      	ldr	r1, [r3, #20]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	2207      	movs	r2, #7
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	4019      	ands	r1, r3
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	6898      	ldr	r0, [r3, #8]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	fa00 f203 	lsl.w	r2, r0, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	695a      	ldr	r2, [r3, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	08db      	lsrs	r3, r3, #3
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d84f      	bhi.n	8001a88 <HAL_ADC_ConfigChannel+0x28c>
 80019e8:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <HAL_ADC_ConfigChannel+0x1f4>)
 80019ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ee:	bf00      	nop
 80019f0:	08001a01 	.word	0x08001a01
 80019f4:	08001a23 	.word	0x08001a23
 80019f8:	08001a45 	.word	0x08001a45
 80019fc:	08001a67 	.word	0x08001a67
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a06:	4b9c      	ldr	r3, [pc, #624]	; (8001c78 <HAL_ADC_ConfigChannel+0x47c>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	0691      	lsls	r1, r2, #26
 8001a10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a12:	430a      	orrs	r2, r1
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a1e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a20:	e07b      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a28:	4b93      	ldr	r3, [pc, #588]	; (8001c78 <HAL_ADC_ConfigChannel+0x47c>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	0691      	lsls	r1, r2, #26
 8001a32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a34:	430a      	orrs	r2, r1
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a40:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a42:	e06a      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a4a:	4b8b      	ldr	r3, [pc, #556]	; (8001c78 <HAL_ADC_ConfigChannel+0x47c>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	0691      	lsls	r1, r2, #26
 8001a54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a56:	430a      	orrs	r2, r1
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a62:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a64:	e059      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a6c:	4b82      	ldr	r3, [pc, #520]	; (8001c78 <HAL_ADC_ConfigChannel+0x47c>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	0691      	lsls	r1, r2, #26
 8001a76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a84:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a86:	e048      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	069b      	lsls	r3, r3, #26
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d107      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001aaa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ab2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	069b      	lsls	r3, r3, #26
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d107      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ace:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ad6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	069b      	lsls	r3, r3, #26
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d107      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001af2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001afa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	069b      	lsls	r3, r3, #26
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d107      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b16:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001b18:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d108      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x33e>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x33e>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x340>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f040 810a 	bne.w	8001d56 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d00f      	beq.n	8001b6a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2201      	movs	r2, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43da      	mvns	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	400a      	ands	r2, r1
 8001b64:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001b68:	e049      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2201      	movs	r2, #1
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b09      	cmp	r3, #9
 8001b8a:	d91c      	bls.n	8001bc6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6999      	ldr	r1, [r3, #24]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3b1b      	subs	r3, #27
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4019      	ands	r1, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6898      	ldr	r0, [r3, #8]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3b1b      	subs	r3, #27
 8001bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	619a      	str	r2, [r3, #24]
 8001bc4:	e01b      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6959      	ldr	r1, [r3, #20]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	2207      	movs	r2, #7
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	4019      	ands	r1, r3
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6898      	ldr	r0, [r3, #8]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bfe:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <HAL_ADC_ConfigChannel+0x480>)
 8001c00:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b10      	cmp	r3, #16
 8001c08:	d105      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d015      	beq.n	8001c42 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c1a:	2b11      	cmp	r3, #17
 8001c1c:	d105      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00b      	beq.n	8001c42 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c2e:	2b12      	cmp	r3, #18
 8001c30:	f040 8091 	bne.w	8001d56 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f040 808a 	bne.w	8001d56 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c4a:	d102      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x456>
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <HAL_ADC_ConfigChannel+0x484>)
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	e002      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x45c>
 8001c52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c56:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d10e      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x488>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d107      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x488>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e006      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x48a>
 8001c78:	83fff000 	.word	0x83fff000
 8001c7c:	50000300 	.word	0x50000300
 8001c80:	50000100 	.word	0x50000100
 8001c84:	2300      	movs	r3, #0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d150      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c8a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d010      	beq.n	8001cb2 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d107      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x4b0>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x4b0>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_ADC_ConfigChannel+0x4b2>
 8001cac:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d13c      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d11d      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x4fa>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cc2:	d118      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cce:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd0:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <HAL_ADC_ConfigChannel+0x574>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a27      	ldr	r2, [pc, #156]	; (8001d74 <HAL_ADC_ConfigChannel+0x578>)
 8001cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cda:	0c9a      	lsrs	r2, r3, #18
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ce6:	e002      	b.n	8001cee <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f9      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cf4:	e02e      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b11      	cmp	r3, #17
 8001cfc:	d10b      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x51a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d06:	d106      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d12:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d14:	e01e      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b12      	cmp	r3, #18
 8001d1c:	d11a      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d28:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d2a:	e013      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f043 0220 	orr.w	r2, r3, #32
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d3e:	e00a      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f043 0220 	orr.w	r2, r3, #32
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d52:	e000      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d54:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	376c      	adds	r7, #108	; 0x6c
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000004 	.word	0x20000004
 8001d74:	431bde83 	.word	0x431bde83

08001d78 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b099      	sub	sp, #100	; 0x64
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d90:	d102      	bne.n	8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001d92:	4b5a      	ldr	r3, [pc, #360]	; (8001efc <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	e002      	b.n	8001d9e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001d98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d9c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0a2      	b.n	8001eee <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e09b      	b.n	8001eee <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d17f      	bne.n	8001ecc <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d179      	bne.n	8001ecc <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dd8:	4b49      	ldr	r3, [pc, #292]	; (8001f00 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001dda:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d040      	beq.n	8001e66 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001de4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001df6:	035b      	lsls	r3, r3, #13
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dfe:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d108      	bne.n	8001e20 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001e20:	2300      	movs	r3, #0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d15c      	bne.n	8001ee0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d107      	bne.n	8001e42 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001e42:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d14b      	bne.n	8001ee0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e50:	f023 030f 	bic.w	r3, r3, #15
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	6811      	ldr	r1, [r2, #0]
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	6892      	ldr	r2, [r2, #8]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e62:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e64:	e03c      	b.n	8001ee0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e70:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d108      	bne.n	8001e92 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001e92:	2300      	movs	r3, #0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d123      	bne.n	8001ee0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d107      	bne.n	8001eb4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001eb4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d112      	bne.n	8001ee0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ec2:	f023 030f 	bic.w	r3, r3, #15
 8001ec6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ec8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001eca:	e009      	b.n	8001ee0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	f043 0220 	orr.w	r2, r3, #32
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001ede:	e000      	b.n	8001ee2 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ee0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001eea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3764      	adds	r7, #100	; 0x64
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	50000100 	.word	0x50000100
 8001f00:	50000300 	.word	0x50000300

08001f04 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d126      	bne.n	8001f6c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d115      	bne.n	8001f64 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d111      	bne.n	8001f64 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d105      	bne.n	8001f64 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f043 0201 	orr.w	r2, r3, #1
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7fe f9cf 	bl	8000308 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001f6a:	e004      	b.n	8001f76 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4798      	blx	r3
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f7ff f943 	bl	8001218 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb8:	f043 0204 	orr.w	r2, r3, #4
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f7ff f933 	bl	800122c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d108      	bne.n	8001ffc <ADC_Enable+0x2c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <ADC_Enable+0x2c>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <ADC_Enable+0x2e>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d143      	bne.n	800208a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <ADC_Enable+0xc4>)
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00d      	beq.n	800202c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	f043 0210 	orr.w	r2, r3, #16
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	f043 0201 	orr.w	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e02f      	b.n	800208c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800203c:	f7ff f8e0 	bl	8001200 <HAL_GetTick>
 8002040:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002042:	e01b      	b.n	800207c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002044:	f7ff f8dc 	bl	8001200 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d914      	bls.n	800207c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d00d      	beq.n	800207c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f043 0210 	orr.w	r2, r3, #16
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	f043 0201 	orr.w	r2, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e007      	b.n	800208c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b01      	cmp	r3, #1
 8002088:	d1dc      	bne.n	8002044 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	8000003f 	.word	0x8000003f

08002098 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d108      	bne.n	80020c4 <ADC_Disable+0x2c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <ADC_Disable+0x2c>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <ADC_Disable+0x2e>
 80020c4:	2300      	movs	r3, #0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d047      	beq.n	800215a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 030d 	and.w	r3, r3, #13
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d10f      	bne.n	80020f8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0202 	orr.w	r2, r2, #2
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2203      	movs	r2, #3
 80020ee:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80020f0:	f7ff f886 	bl	8001200 <HAL_GetTick>
 80020f4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020f6:	e029      	b.n	800214c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f043 0210 	orr.w	r2, r3, #16
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002108:	f043 0201 	orr.w	r2, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e023      	b.n	800215c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002114:	f7ff f874 	bl	8001200 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d914      	bls.n	800214c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b01      	cmp	r3, #1
 800212e:	d10d      	bne.n	800214c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f043 0210 	orr.w	r2, r3, #16
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e007      	b.n	800215c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d0dc      	beq.n	8002114 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002180:	4013      	ands	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800218c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002196:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	60d3      	str	r3, [r2, #12]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <__NVIC_GetPriorityGrouping+0x18>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	f003 0307 	and.w	r3, r3, #7
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	db0b      	blt.n	80021f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	f003 021f 	and.w	r2, r3, #31
 80021e0:	4907      	ldr	r1, [pc, #28]	; (8002200 <__NVIC_EnableIRQ+0x38>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	2001      	movs	r0, #1
 80021ea:	fa00 f202 	lsl.w	r2, r0, r2
 80021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	e000e100 	.word	0xe000e100

08002204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	6039      	str	r1, [r7, #0]
 800220e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	2b00      	cmp	r3, #0
 8002216:	db0a      	blt.n	800222e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	b2da      	uxtb	r2, r3
 800221c:	490c      	ldr	r1, [pc, #48]	; (8002250 <__NVIC_SetPriority+0x4c>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	0112      	lsls	r2, r2, #4
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	440b      	add	r3, r1
 8002228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800222c:	e00a      	b.n	8002244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4908      	ldr	r1, [pc, #32]	; (8002254 <__NVIC_SetPriority+0x50>)
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	3b04      	subs	r3, #4
 800223c:	0112      	lsls	r2, r2, #4
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	440b      	add	r3, r1
 8002242:	761a      	strb	r2, [r3, #24]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000e100 	.word	0xe000e100
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f1c3 0307 	rsb	r3, r3, #7
 8002272:	2b04      	cmp	r3, #4
 8002274:	bf28      	it	cs
 8002276:	2304      	movcs	r3, #4
 8002278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3304      	adds	r3, #4
 800227e:	2b06      	cmp	r3, #6
 8002280:	d902      	bls.n	8002288 <NVIC_EncodePriority+0x30>
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3b03      	subs	r3, #3
 8002286:	e000      	b.n	800228a <NVIC_EncodePriority+0x32>
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	f04f 32ff 	mov.w	r2, #4294967295
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43da      	mvns	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	401a      	ands	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a0:	f04f 31ff 	mov.w	r1, #4294967295
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	43d9      	mvns	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	4313      	orrs	r3, r2
         );
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3724      	adds	r7, #36	; 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d0:	d301      	bcc.n	80022d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00f      	b.n	80022f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d6:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <SysTick_Config+0x40>)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3b01      	subs	r3, #1
 80022dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022de:	210f      	movs	r1, #15
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295
 80022e4:	f7ff ff8e 	bl	8002204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <SysTick_Config+0x40>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ee:	4b04      	ldr	r3, [pc, #16]	; (8002300 <SysTick_Config+0x40>)
 80022f0:	2207      	movs	r2, #7
 80022f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	e000e010 	.word	0xe000e010

08002304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ff29 	bl	8002164 <__NVIC_SetPriorityGrouping>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800232c:	f7ff ff3e 	bl	80021ac <__NVIC_GetPriorityGrouping>
 8002330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	6978      	ldr	r0, [r7, #20]
 8002338:	f7ff ff8e 	bl	8002258 <NVIC_EncodePriority>
 800233c:	4602      	mov	r2, r0
 800233e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff5d 	bl	8002204 <__NVIC_SetPriority>
}
 800234a:	bf00      	nop
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff31 	bl	80021c8 <__NVIC_EnableIRQ>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff ffa2 	bl	80022c0 <SysTick_Config>
 800237c:	4603      	mov	r3, r0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e037      	b.n	800240c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f940 	bl	8002674 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}  
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_DMA_Start_IT+0x20>
 8002430:	2302      	movs	r3, #2
 8002432:	e04a      	b.n	80024ca <HAL_DMA_Start_IT+0xb6>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002442:	2b01      	cmp	r3, #1
 8002444:	d13a      	bne.n	80024bc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2202      	movs	r2, #2
 800244a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f8d4 	bl	8002618 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 020e 	orr.w	r2, r2, #14
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	e00f      	b.n	80024aa <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 020a 	orr.w	r2, r2, #10
 8002498:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0204 	bic.w	r2, r2, #4
 80024a8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0201 	orr.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	e005      	b.n	80024c8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80024c4:	2302      	movs	r3, #2
 80024c6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	2204      	movs	r2, #4
 80024f0:	409a      	lsls	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d024      	beq.n	8002544 <HAL_DMA_IRQHandler+0x72>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01f      	beq.n	8002544 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b00      	cmp	r3, #0
 8002510:	d107      	bne.n	8002522 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0204 	bic.w	r2, r2, #4
 8002520:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252a:	2104      	movs	r1, #4
 800252c:	fa01 f202 	lsl.w	r2, r1, r2
 8002530:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	2b00      	cmp	r3, #0
 8002538:	d06a      	beq.n	8002610 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002542:	e065      	b.n	8002610 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	2202      	movs	r2, #2
 800254a:	409a      	lsls	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d02c      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdc>
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d027      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10b      	bne.n	8002584 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 020a 	bic.w	r2, r2, #10
 800257a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258c:	2102      	movs	r1, #2
 800258e:	fa01 f202 	lsl.w	r2, r1, r2
 8002592:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d035      	beq.n	8002610 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80025ac:	e030      	b.n	8002610 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	2208      	movs	r2, #8
 80025b4:	409a      	lsls	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d028      	beq.n	8002610 <HAL_DMA_IRQHandler+0x13e>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d023      	beq.n	8002610 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 020e 	bic.w	r2, r2, #14
 80025d6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e0:	2101      	movs	r1, #1
 80025e2:	fa01 f202 	lsl.w	r2, r1, r2
 80025e6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	4798      	blx	r3
    }
  }
}  
 800260e:	e7ff      	b.n	8002610 <HAL_DMA_IRQHandler+0x13e>
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262e:	2101      	movs	r1, #1
 8002630:	fa01 f202 	lsl.w	r2, r1, r2
 8002634:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b10      	cmp	r3, #16
 8002644:	d108      	bne.n	8002658 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002656:	e007      	b.n	8002668 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	60da      	str	r2, [r3, #12]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <DMA_CalcBaseAndBitshift+0x34>)
 8002684:	4413      	add	r3, r2
 8002686:	4a09      	ldr	r2, [pc, #36]	; (80026ac <DMA_CalcBaseAndBitshift+0x38>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	009a      	lsls	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <DMA_CalcBaseAndBitshift+0x3c>)
 8002698:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	bffdfff8 	.word	0xbffdfff8
 80026ac:	cccccccd 	.word	0xcccccccd
 80026b0:	40020000 	.word	0x40020000

080026b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026c2:	e14e      	b.n	8002962 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	2101      	movs	r1, #1
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	4013      	ands	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8140 	beq.w	800295c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d005      	beq.n	80026f4 <HAL_GPIO_Init+0x40>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d130      	bne.n	8002756 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	2203      	movs	r2, #3
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4013      	ands	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800272a:	2201      	movs	r2, #1
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	f003 0201 	and.w	r2, r3, #1
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b03      	cmp	r3, #3
 8002760:	d017      	beq.n	8002792 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	2203      	movs	r2, #3
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d123      	bne.n	80027e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	08da      	lsrs	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3208      	adds	r2, #8
 80027a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	220f      	movs	r2, #15
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	08da      	lsrs	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3208      	adds	r2, #8
 80027e0:	6939      	ldr	r1, [r7, #16]
 80027e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0203 	and.w	r2, r3, #3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 809a 	beq.w	800295c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002828:	4b55      	ldr	r3, [pc, #340]	; (8002980 <HAL_GPIO_Init+0x2cc>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	4a54      	ldr	r2, [pc, #336]	; (8002980 <HAL_GPIO_Init+0x2cc>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6193      	str	r3, [r2, #24]
 8002834:	4b52      	ldr	r3, [pc, #328]	; (8002980 <HAL_GPIO_Init+0x2cc>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002840:	4a50      	ldr	r2, [pc, #320]	; (8002984 <HAL_GPIO_Init+0x2d0>)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	089b      	lsrs	r3, r3, #2
 8002846:	3302      	adds	r3, #2
 8002848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	220f      	movs	r2, #15
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800286a:	d013      	beq.n	8002894 <HAL_GPIO_Init+0x1e0>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a46      	ldr	r2, [pc, #280]	; (8002988 <HAL_GPIO_Init+0x2d4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00d      	beq.n	8002890 <HAL_GPIO_Init+0x1dc>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a45      	ldr	r2, [pc, #276]	; (800298c <HAL_GPIO_Init+0x2d8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d007      	beq.n	800288c <HAL_GPIO_Init+0x1d8>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a44      	ldr	r2, [pc, #272]	; (8002990 <HAL_GPIO_Init+0x2dc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d101      	bne.n	8002888 <HAL_GPIO_Init+0x1d4>
 8002884:	2303      	movs	r3, #3
 8002886:	e006      	b.n	8002896 <HAL_GPIO_Init+0x1e2>
 8002888:	2305      	movs	r3, #5
 800288a:	e004      	b.n	8002896 <HAL_GPIO_Init+0x1e2>
 800288c:	2302      	movs	r3, #2
 800288e:	e002      	b.n	8002896 <HAL_GPIO_Init+0x1e2>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <HAL_GPIO_Init+0x1e2>
 8002894:	2300      	movs	r3, #0
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	f002 0203 	and.w	r2, r2, #3
 800289c:	0092      	lsls	r2, r2, #2
 800289e:	4093      	lsls	r3, r2
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028a6:	4937      	ldr	r1, [pc, #220]	; (8002984 <HAL_GPIO_Init+0x2d0>)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	089b      	lsrs	r3, r3, #2
 80028ac:	3302      	adds	r3, #2
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028b4:	4b37      	ldr	r3, [pc, #220]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	43db      	mvns	r3, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028d8:	4a2e      	ldr	r2, [pc, #184]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028de:	4b2d      	ldr	r3, [pc, #180]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4013      	ands	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002902:	4a24      	ldr	r2, [pc, #144]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002908:	4b22      	ldr	r3, [pc, #136]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	43db      	mvns	r3, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800292c:	4a19      	ldr	r2, [pc, #100]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002932:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	43db      	mvns	r3, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002956:	4a0f      	ldr	r2, [pc, #60]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	3301      	adds	r3, #1
 8002960:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	f47f aea9 	bne.w	80026c4 <HAL_GPIO_Init+0x10>
  }
}
 8002972:	bf00      	nop
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	40021000 	.word	0x40021000
 8002984:	40010000 	.word	0x40010000
 8002988:	48000400 	.word	0x48000400
 800298c:	48000800 	.word	0x48000800
 8002990:	48000c00 	.word	0x48000c00
 8002994:	40010400 	.word	0x40010400

08002998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
 80029a4:	4613      	mov	r3, r2
 80029a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a8:	787b      	ldrb	r3, [r7, #1]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ae:	887a      	ldrh	r2, [r7, #2]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029b4:	e002      	b.n	80029bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029b6:	887a      	ldrh	r2, [r7, #2]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d006      	beq.n	80029ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029de:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fd fbee 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40010400 	.word	0x40010400

080029f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a08:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f001 b823 	b.w	8003a64 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 817d 	beq.w	8002d2e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a34:	4bbc      	ldr	r3, [pc, #752]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d00c      	beq.n	8002a5a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a40:	4bb9      	ldr	r3, [pc, #740]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d15c      	bne.n	8002b06 <HAL_RCC_OscConfig+0x10e>
 8002a4c:	4bb6      	ldr	r3, [pc, #728]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a58:	d155      	bne.n	8002b06 <HAL_RCC_OscConfig+0x10e>
 8002a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a6e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a72:	fab3 f383 	clz	r3, r3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d102      	bne.n	8002a8c <HAL_RCC_OscConfig+0x94>
 8002a86:	4ba8      	ldr	r3, [pc, #672]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	e015      	b.n	8002ab8 <HAL_RCC_OscConfig+0xc0>
 8002a8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a90:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002aa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aa4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002aa8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002aac:	fa93 f3a3 	rbit	r3, r3
 8002ab0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002ab4:	4b9c      	ldr	r3, [pc, #624]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002abc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002ac0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002ac4:	fa92 f2a2 	rbit	r2, r2
 8002ac8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002acc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002ad0:	fab2 f282 	clz	r2, r2
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	f042 0220 	orr.w	r2, r2, #32
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	f002 021f 	and.w	r2, r2, #31
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 811f 	beq.w	8002d2c <HAL_RCC_OscConfig+0x334>
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f040 8116 	bne.w	8002d2c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f000 bfaf 	b.w	8003a64 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_OscConfig+0x12e>
 8002b18:	4b83      	ldr	r3, [pc, #524]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a82      	ldr	r2, [pc, #520]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	e036      	b.n	8002b94 <HAL_RCC_OscConfig+0x19c>
 8002b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x158>
 8002b36:	4b7c      	ldr	r3, [pc, #496]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a7b      	ldr	r2, [pc, #492]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b79      	ldr	r3, [pc, #484]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a78      	ldr	r2, [pc, #480]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e021      	b.n	8002b94 <HAL_RCC_OscConfig+0x19c>
 8002b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x184>
 8002b62:	4b71      	ldr	r3, [pc, #452]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a70      	ldr	r2, [pc, #448]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	4b6e      	ldr	r3, [pc, #440]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a6d      	ldr	r2, [pc, #436]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	e00b      	b.n	8002b94 <HAL_RCC_OscConfig+0x19c>
 8002b7c:	4b6a      	ldr	r3, [pc, #424]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a69      	ldr	r2, [pc, #420]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b67      	ldr	r3, [pc, #412]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a66      	ldr	r2, [pc, #408]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b92:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b94:	4b64      	ldr	r3, [pc, #400]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	f023 020f 	bic.w	r2, r3, #15
 8002b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	495f      	ldr	r1, [pc, #380]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d059      	beq.n	8002c72 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7fe fb1f 	bl	8001200 <HAL_GetTick>
 8002bc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc8:	f7fe fb1a 	bl	8001200 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b64      	cmp	r3, #100	; 0x64
 8002bd6:	d902      	bls.n	8002bde <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	f000 bf43 	b.w	8003a64 <HAL_RCC_OscConfig+0x106c>
 8002bde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002bf2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	095b      	lsrs	r3, r3, #5
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d102      	bne.n	8002c10 <HAL_RCC_OscConfig+0x218>
 8002c0a:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	e015      	b.n	8002c3c <HAL_RCC_OscConfig+0x244>
 8002c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c14:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002c24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c28:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002c2c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002c38:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c40:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002c44:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002c48:	fa92 f2a2 	rbit	r2, r2
 8002c4c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002c50:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002c54:	fab2 f282 	clz	r2, r2
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	f042 0220 	orr.w	r2, r2, #32
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	f002 021f 	and.w	r2, r2, #31
 8002c64:	2101      	movs	r1, #1
 8002c66:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0ab      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x1d0>
 8002c70:	e05d      	b.n	8002d2e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c72:	f7fe fac5 	bl	8001200 <HAL_GetTick>
 8002c76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7fe fac0 	bl	8001200 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b64      	cmp	r3, #100	; 0x64
 8002c8a:	d902      	bls.n	8002c92 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	f000 bee9 	b.w	8003a64 <HAL_RCC_OscConfig+0x106c>
 8002c92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c96:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002ca6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d102      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x2cc>
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	e015      	b.n	8002cf0 <HAL_RCC_OscConfig+0x2f8>
 8002cc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cc8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cdc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002ce0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cf4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002cf8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002cfc:	fa92 f2a2 	rbit	r2, r2
 8002d00:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002d04:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002d08:	fab2 f282 	clz	r2, r2
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	f042 0220 	orr.w	r2, r2, #32
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	f002 021f 	and.w	r2, r2, #31
 8002d18:	2101      	movs	r1, #1
 8002d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1ab      	bne.n	8002c7c <HAL_RCC_OscConfig+0x284>
 8002d24:	e003      	b.n	8002d2e <HAL_RCC_OscConfig+0x336>
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 817d 	beq.w	800303e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d44:	4ba6      	ldr	r3, [pc, #664]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00b      	beq.n	8002d68 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d50:	4ba3      	ldr	r3, [pc, #652]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 030c 	and.w	r3, r3, #12
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d172      	bne.n	8002e42 <HAL_RCC_OscConfig+0x44a>
 8002d5c:	4ba0      	ldr	r3, [pc, #640]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d16c      	bne.n	8002e42 <HAL_RCC_OscConfig+0x44a>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d7a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d102      	bne.n	8002d98 <HAL_RCC_OscConfig+0x3a0>
 8002d92:	4b93      	ldr	r3, [pc, #588]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	e013      	b.n	8002dc0 <HAL_RCC_OscConfig+0x3c8>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002daa:	2302      	movs	r3, #2
 8002dac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002db0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002dbc:	4b88      	ldr	r3, [pc, #544]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002dc6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002dca:	fa92 f2a2 	rbit	r2, r2
 8002dce:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002dd2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002dd6:	fab2 f282 	clz	r2, r2
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	f042 0220 	orr.w	r2, r2, #32
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	f002 021f 	and.w	r2, r2, #31
 8002de6:	2101      	movs	r1, #1
 8002de8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <HAL_RCC_OscConfig+0x410>
 8002df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d002      	beq.n	8002e08 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	f000 be2e 	b.w	8003a64 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e08:	4b75      	ldr	r3, [pc, #468]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	21f8      	movs	r1, #248	; 0xf8
 8002e1e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002e26:	fa91 f1a1 	rbit	r1, r1
 8002e2a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002e2e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002e32:	fab1 f181 	clz	r1, r1
 8002e36:	b2c9      	uxtb	r1, r1
 8002e38:	408b      	lsls	r3, r1
 8002e3a:	4969      	ldr	r1, [pc, #420]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e40:	e0fd      	b.n	800303e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 8088 	beq.w	8002f64 <HAL_RCC_OscConfig+0x56c>
 8002e54:	2301      	movs	r3, #1
 8002e56:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002e66:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fe f9be 	bl	8001200 <HAL_GetTick>
 8002e84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e88:	e00a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e8a:	f7fe f9b9 	bl	8001200 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d902      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	f000 bde2 	b.w	8003a64 <HAL_RCC_OscConfig+0x106c>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002eb2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	095b      	lsrs	r3, r3, #5
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d102      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4d8>
 8002eca:	4b45      	ldr	r3, [pc, #276]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	e013      	b.n	8002ef8 <HAL_RCC_OscConfig+0x500>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ee8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002ef4:	4b3a      	ldr	r3, [pc, #232]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	2202      	movs	r2, #2
 8002efa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002efe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f02:	fa92 f2a2 	rbit	r2, r2
 8002f06:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002f0a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002f0e:	fab2 f282 	clz	r2, r2
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	f042 0220 	orr.w	r2, r2, #32
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	f002 021f 	and.w	r2, r2, #31
 8002f1e:	2101      	movs	r1, #1
 8002f20:	fa01 f202 	lsl.w	r2, r1, r2
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0af      	beq.n	8002e8a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2a:	4b2d      	ldr	r3, [pc, #180]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	21f8      	movs	r1, #248	; 0xf8
 8002f40:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002f48:	fa91 f1a1 	rbit	r1, r1
 8002f4c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002f50:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002f54:	fab1 f181 	clz	r1, r1
 8002f58:	b2c9      	uxtb	r1, r1
 8002f5a:	408b      	lsls	r3, r1
 8002f5c:	4920      	ldr	r1, [pc, #128]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]
 8002f62:	e06c      	b.n	800303e <HAL_RCC_OscConfig+0x646>
 8002f64:	2301      	movs	r3, #1
 8002f66:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f6e:	fa93 f3a3 	rbit	r3, r3
 8002f72:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002f76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7a:	fab3 f383 	clz	r3, r3
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fe f936 	bl	8001200 <HAL_GetTick>
 8002f94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9a:	f7fe f931 	bl	8001200 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d902      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	f000 bd5a 	b.w	8003a64 <HAL_RCC_OscConfig+0x106c>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d104      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x5ec>
 8002fda:	4b01      	ldr	r3, [pc, #4]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	e015      	b.n	800300c <HAL_RCC_OscConfig+0x614>
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ffc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003008:	4bc8      	ldr	r3, [pc, #800]	; (800332c <HAL_RCC_OscConfig+0x934>)
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	2202      	movs	r2, #2
 800300e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003012:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003016:	fa92 f2a2 	rbit	r2, r2
 800301a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800301e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003022:	fab2 f282 	clz	r2, r2
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	f042 0220 	orr.w	r2, r2, #32
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	f002 021f 	and.w	r2, r2, #31
 8003032:	2101      	movs	r1, #1
 8003034:	fa01 f202 	lsl.w	r2, r1, r2
 8003038:	4013      	ands	r3, r2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1ad      	bne.n	8002f9a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 8110 	beq.w	8003274 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003058:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d079      	beq.n	8003158 <HAL_RCC_OscConfig+0x760>
 8003064:	2301      	movs	r3, #1
 8003066:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800306e:	fa93 f3a3 	rbit	r3, r3
 8003072:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	4bab      	ldr	r3, [pc, #684]	; (8003330 <HAL_RCC_OscConfig+0x938>)
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	461a      	mov	r2, r3
 800308a:	2301      	movs	r3, #1
 800308c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308e:	f7fe f8b7 	bl	8001200 <HAL_GetTick>
 8003092:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003096:	e00a      	b.n	80030ae <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003098:	f7fe f8b2 	bl	8001200 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d902      	bls.n	80030ae <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	f000 bcdb 	b.w	8003a64 <HAL_RCC_OscConfig+0x106c>
 80030ae:	2302      	movs	r3, #2
 80030b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80030b8:	fa93 f3a3 	rbit	r3, r3
 80030bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80030c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80030c8:	2202      	movs	r2, #2
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	fa93 f2a3 	rbit	r2, r3
 80030da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030ec:	2202      	movs	r2, #2
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	fa93 f2a3 	rbit	r2, r3
 80030fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003102:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003106:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003108:	4b88      	ldr	r3, [pc, #544]	; (800332c <HAL_RCC_OscConfig+0x934>)
 800310a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800310c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003110:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003114:	2102      	movs	r1, #2
 8003116:	6019      	str	r1, [r3, #0]
 8003118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	fa93 f1a3 	rbit	r1, r3
 8003126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800312e:	6019      	str	r1, [r3, #0]
  return result;
 8003130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003134:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	2101      	movs	r1, #1
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0a0      	beq.n	8003098 <HAL_RCC_OscConfig+0x6a0>
 8003156:	e08d      	b.n	8003274 <HAL_RCC_OscConfig+0x87c>
 8003158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003160:	2201      	movs	r2, #1
 8003162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003168:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	fa93 f2a3 	rbit	r2, r3
 8003172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003176:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800317a:	601a      	str	r2, [r3, #0]
  return result;
 800317c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003180:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003184:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	4b68      	ldr	r3, [pc, #416]	; (8003330 <HAL_RCC_OscConfig+0x938>)
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	461a      	mov	r2, r3
 8003196:	2300      	movs	r3, #0
 8003198:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7fe f831 	bl	8001200 <HAL_GetTick>
 800319e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a4:	f7fe f82c 	bl	8001200 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d902      	bls.n	80031ba <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	f000 bc55 	b.w	8003a64 <HAL_RCC_OscConfig+0x106c>
 80031ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031be:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80031c2:	2202      	movs	r2, #2
 80031c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	fa93 f2a3 	rbit	r2, r3
 80031d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031e6:	2202      	movs	r2, #2
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	fa93 f2a3 	rbit	r2, r3
 80031f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800320a:	2202      	movs	r2, #2
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003212:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	fa93 f2a3 	rbit	r2, r3
 800321c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003220:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003224:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003226:	4b41      	ldr	r3, [pc, #260]	; (800332c <HAL_RCC_OscConfig+0x934>)
 8003228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800322a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003232:	2102      	movs	r1, #2
 8003234:	6019      	str	r1, [r3, #0]
 8003236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	fa93 f1a3 	rbit	r1, r3
 8003244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003248:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800324c:	6019      	str	r1, [r3, #0]
  return result;
 800324e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003252:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	fab3 f383 	clz	r3, r3
 800325c:	b2db      	uxtb	r3, r3
 800325e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f303 	lsl.w	r3, r1, r3
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d197      	bne.n	80031a4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003278:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 81a1 	beq.w	80035cc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328a:	2300      	movs	r3, #0
 800328c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003290:	4b26      	ldr	r3, [pc, #152]	; (800332c <HAL_RCC_OscConfig+0x934>)
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d116      	bne.n	80032ca <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329c:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_RCC_OscConfig+0x934>)
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	4a22      	ldr	r2, [pc, #136]	; (800332c <HAL_RCC_OscConfig+0x934>)
 80032a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a6:	61d3      	str	r3, [r2, #28]
 80032a8:	4b20      	ldr	r3, [pc, #128]	; (800332c <HAL_RCC_OscConfig+0x934>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80032b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032be:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80032c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ca:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <HAL_RCC_OscConfig+0x93c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d11a      	bne.n	800330c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d6:	4b17      	ldr	r3, [pc, #92]	; (8003334 <HAL_RCC_OscConfig+0x93c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a16      	ldr	r2, [pc, #88]	; (8003334 <HAL_RCC_OscConfig+0x93c>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e2:	f7fd ff8d 	bl	8001200 <HAL_GetTick>
 80032e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ea:	e009      	b.n	8003300 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ec:	f7fd ff88 	bl	8001200 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b64      	cmp	r3, #100	; 0x64
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e3b1      	b.n	8003a64 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_RCC_OscConfig+0x93c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0ef      	beq.n	80032ec <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800330c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003310:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d10d      	bne.n	8003338 <HAL_RCC_OscConfig+0x940>
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_RCC_OscConfig+0x934>)
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	4a02      	ldr	r2, [pc, #8]	; (800332c <HAL_RCC_OscConfig+0x934>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6213      	str	r3, [r2, #32]
 8003328:	e03c      	b.n	80033a4 <HAL_RCC_OscConfig+0x9ac>
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000
 8003330:	10908120 	.word	0x10908120
 8003334:	40007000 	.word	0x40007000
 8003338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10c      	bne.n	8003362 <HAL_RCC_OscConfig+0x96a>
 8003348:	4bc1      	ldr	r3, [pc, #772]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	4ac0      	ldr	r2, [pc, #768]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 800334e:	f023 0301 	bic.w	r3, r3, #1
 8003352:	6213      	str	r3, [r2, #32]
 8003354:	4bbe      	ldr	r3, [pc, #760]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	4abd      	ldr	r2, [pc, #756]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 800335a:	f023 0304 	bic.w	r3, r3, #4
 800335e:	6213      	str	r3, [r2, #32]
 8003360:	e020      	b.n	80033a4 <HAL_RCC_OscConfig+0x9ac>
 8003362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003366:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b05      	cmp	r3, #5
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x994>
 8003372:	4bb7      	ldr	r3, [pc, #732]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	4ab6      	ldr	r2, [pc, #728]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	6213      	str	r3, [r2, #32]
 800337e:	4bb4      	ldr	r3, [pc, #720]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	4ab3      	ldr	r2, [pc, #716]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6213      	str	r3, [r2, #32]
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0x9ac>
 800338c:	4bb0      	ldr	r3, [pc, #704]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4aaf      	ldr	r2, [pc, #700]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	6213      	str	r3, [r2, #32]
 8003398:	4bad      	ldr	r3, [pc, #692]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	4aac      	ldr	r2, [pc, #688]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 800339e:	f023 0304 	bic.w	r3, r3, #4
 80033a2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 8081 	beq.w	80034b8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b6:	f7fd ff23 	bl	8001200 <HAL_GetTick>
 80033ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033be:	e00b      	b.n	80033d8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fd ff1e 	bl	8001200 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e345      	b.n	8003a64 <HAL_RCC_OscConfig+0x106c>
 80033d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033dc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033e0:	2202      	movs	r2, #2
 80033e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	fa93 f2a3 	rbit	r2, r3
 80033f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003400:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003404:	2202      	movs	r2, #2
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	fa93 f2a3 	rbit	r2, r3
 8003416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800341e:	601a      	str	r2, [r3, #0]
  return result;
 8003420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003424:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003428:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d102      	bne.n	8003444 <HAL_RCC_OscConfig+0xa4c>
 800343e:	4b84      	ldr	r3, [pc, #528]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	e013      	b.n	800346c <HAL_RCC_OscConfig+0xa74>
 8003444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003448:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800344c:	2202      	movs	r2, #2
 800344e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003454:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	fa93 f2a3 	rbit	r2, r3
 800345e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003462:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	4b79      	ldr	r3, [pc, #484]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003470:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003474:	2102      	movs	r1, #2
 8003476:	6011      	str	r1, [r2, #0]
 8003478:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800347c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003480:	6812      	ldr	r2, [r2, #0]
 8003482:	fa92 f1a2 	rbit	r1, r2
 8003486:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800348a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800348e:	6011      	str	r1, [r2, #0]
  return result;
 8003490:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003494:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003498:	6812      	ldr	r2, [r2, #0]
 800349a:	fab2 f282 	clz	r2, r2
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	f002 021f 	and.w	r2, r2, #31
 80034aa:	2101      	movs	r1, #1
 80034ac:	fa01 f202 	lsl.w	r2, r1, r2
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d084      	beq.n	80033c0 <HAL_RCC_OscConfig+0x9c8>
 80034b6:	e07f      	b.n	80035b8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b8:	f7fd fea2 	bl	8001200 <HAL_GetTick>
 80034bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c0:	e00b      	b.n	80034da <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fd fe9d 	bl	8001200 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e2c4      	b.n	8003a64 <HAL_RCC_OscConfig+0x106c>
 80034da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034de:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80034e2:	2202      	movs	r2, #2
 80034e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	fa93 f2a3 	rbit	r2, r3
 80034f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003502:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003506:	2202      	movs	r2, #2
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	fa93 f2a3 	rbit	r2, r3
 8003518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003520:	601a      	str	r2, [r3, #0]
  return result;
 8003522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003526:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800352a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352c:	fab3 f383 	clz	r3, r3
 8003530:	b2db      	uxtb	r3, r3
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	b2db      	uxtb	r3, r3
 8003536:	f043 0302 	orr.w	r3, r3, #2
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d102      	bne.n	8003546 <HAL_RCC_OscConfig+0xb4e>
 8003540:	4b43      	ldr	r3, [pc, #268]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	e013      	b.n	800356e <HAL_RCC_OscConfig+0xb76>
 8003546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800354e:	2202      	movs	r2, #2
 8003550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003556:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	fa93 f2a3 	rbit	r2, r3
 8003560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003564:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	4b39      	ldr	r3, [pc, #228]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003572:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003576:	2102      	movs	r1, #2
 8003578:	6011      	str	r1, [r2, #0]
 800357a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800357e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	fa92 f1a2 	rbit	r1, r2
 8003588:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800358c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003590:	6011      	str	r1, [r2, #0]
  return result;
 8003592:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003596:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	fab2 f282 	clz	r2, r2
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	f002 021f 	and.w	r2, r2, #31
 80035ac:	2101      	movs	r1, #1
 80035ae:	fa01 f202 	lsl.w	r2, r1, r2
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d184      	bne.n	80034c2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035b8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d105      	bne.n	80035cc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c0:	4b23      	ldr	r3, [pc, #140]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	4a22      	ldr	r2, [pc, #136]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 80035c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 8242 	beq.w	8003a62 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035de:	4b1c      	ldr	r3, [pc, #112]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f003 030c 	and.w	r3, r3, #12
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	f000 8213 	beq.w	8003a12 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	f040 8162 	bne.w	80038c2 <HAL_RCC_OscConfig+0xeca>
 80035fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003602:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003606:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800360a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003610:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	fa93 f2a3 	rbit	r2, r3
 800361a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003622:	601a      	str	r2, [r3, #0]
  return result;
 8003624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003628:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800362c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003638:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	461a      	mov	r2, r3
 8003640:	2300      	movs	r3, #0
 8003642:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7fd fddc 	bl	8001200 <HAL_GetTick>
 8003648:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364c:	e00c      	b.n	8003668 <HAL_RCC_OscConfig+0xc70>
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003654:	f7fd fdd4 	bl	8001200 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e1fd      	b.n	8003a64 <HAL_RCC_OscConfig+0x106c>
 8003668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003670:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	fa93 f2a3 	rbit	r2, r3
 8003684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003688:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800368c:	601a      	str	r2, [r3, #0]
  return result;
 800368e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003692:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003696:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	b2db      	uxtb	r3, r3
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d102      	bne.n	80036b2 <HAL_RCC_OscConfig+0xcba>
 80036ac:	4bb0      	ldr	r3, [pc, #704]	; (8003970 <HAL_RCC_OscConfig+0xf78>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	e027      	b.n	8003702 <HAL_RCC_OscConfig+0xd0a>
 80036b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80036ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	fa93 f2a3 	rbit	r2, r3
 80036ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036dc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80036e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ea:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	fa93 f2a3 	rbit	r2, r3
 80036f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	4b9c      	ldr	r3, [pc, #624]	; (8003970 <HAL_RCC_OscConfig+0xf78>)
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003706:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800370a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800370e:	6011      	str	r1, [r2, #0]
 8003710:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003714:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	fa92 f1a2 	rbit	r1, r2
 800371e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003722:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003726:	6011      	str	r1, [r2, #0]
  return result;
 8003728:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800372c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	fab2 f282 	clz	r2, r2
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	f042 0220 	orr.w	r2, r2, #32
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	f002 021f 	and.w	r2, r2, #31
 8003742:	2101      	movs	r1, #1
 8003744:	fa01 f202 	lsl.w	r2, r1, r2
 8003748:	4013      	ands	r3, r2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d182      	bne.n	8003654 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800374e:	4b88      	ldr	r3, [pc, #544]	; (8003970 <HAL_RCC_OscConfig+0xf78>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003766:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	430b      	orrs	r3, r1
 8003770:	497f      	ldr	r1, [pc, #508]	; (8003970 <HAL_RCC_OscConfig+0xf78>)
 8003772:	4313      	orrs	r3, r2
 8003774:	604b      	str	r3, [r1, #4]
 8003776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800377e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003788:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	fa93 f2a3 	rbit	r2, r3
 8003792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003796:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800379a:	601a      	str	r2, [r3, #0]
  return result;
 800379c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80037a4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	461a      	mov	r2, r3
 80037b8:	2301      	movs	r3, #1
 80037ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fd fd20 	bl	8001200 <HAL_GetTick>
 80037c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037c4:	e009      	b.n	80037da <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c6:	f7fd fd1b 	bl	8001200 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e144      	b.n	8003a64 <HAL_RCC_OscConfig+0x106c>
 80037da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037de:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80037e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ec:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	fa93 f2a3 	rbit	r2, r3
 80037f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80037fe:	601a      	str	r2, [r3, #0]
  return result;
 8003800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003804:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003808:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d102      	bne.n	8003824 <HAL_RCC_OscConfig+0xe2c>
 800381e:	4b54      	ldr	r3, [pc, #336]	; (8003970 <HAL_RCC_OscConfig+0xf78>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	e027      	b.n	8003874 <HAL_RCC_OscConfig+0xe7c>
 8003824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003828:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800382c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003836:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	fa93 f2a3 	rbit	r2, r3
 8003840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003844:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003852:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	fa93 f2a3 	rbit	r2, r3
 8003866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	4b3f      	ldr	r3, [pc, #252]	; (8003970 <HAL_RCC_OscConfig+0xf78>)
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003878:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800387c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003880:	6011      	str	r1, [r2, #0]
 8003882:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003886:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	fa92 f1a2 	rbit	r1, r2
 8003890:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003894:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003898:	6011      	str	r1, [r2, #0]
  return result;
 800389a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800389e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	fab2 f282 	clz	r2, r2
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	f042 0220 	orr.w	r2, r2, #32
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	f002 021f 	and.w	r2, r2, #31
 80038b4:	2101      	movs	r1, #1
 80038b6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d082      	beq.n	80037c6 <HAL_RCC_OscConfig+0xdce>
 80038c0:	e0cf      	b.n	8003a62 <HAL_RCC_OscConfig+0x106a>
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80038ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	fa93 f2a3 	rbit	r2, r3
 80038de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80038e6:	601a      	str	r2, [r3, #0]
  return result;
 80038e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ec:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80038f0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	461a      	mov	r2, r3
 8003904:	2300      	movs	r3, #0
 8003906:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003908:	f7fd fc7a 	bl	8001200 <HAL_GetTick>
 800390c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003910:	e009      	b.n	8003926 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003912:	f7fd fc75 	bl	8001200 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e09e      	b.n	8003a64 <HAL_RCC_OscConfig+0x106c>
 8003926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800392e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003932:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003938:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	fa93 f2a3 	rbit	r2, r3
 8003942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003946:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800394a:	601a      	str	r2, [r3, #0]
  return result;
 800394c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003950:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003954:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003956:	fab3 f383 	clz	r3, r3
 800395a:	b2db      	uxtb	r3, r3
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	b2db      	uxtb	r3, r3
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d104      	bne.n	8003974 <HAL_RCC_OscConfig+0xf7c>
 800396a:	4b01      	ldr	r3, [pc, #4]	; (8003970 <HAL_RCC_OscConfig+0xf78>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	e029      	b.n	80039c4 <HAL_RCC_OscConfig+0xfcc>
 8003970:	40021000 	.word	0x40021000
 8003974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003978:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800397c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003986:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	fa93 f2a3 	rbit	r2, r3
 8003990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003994:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80039a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ac:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	fa93 f2a3 	rbit	r2, r3
 80039b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ba:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	4b2b      	ldr	r3, [pc, #172]	; (8003a70 <HAL_RCC_OscConfig+0x1078>)
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039c8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80039cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039d0:	6011      	str	r1, [r2, #0]
 80039d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039d6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	fa92 f1a2 	rbit	r1, r2
 80039e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039e4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80039e8:	6011      	str	r1, [r2, #0]
  return result;
 80039ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039ee:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	fab2 f282 	clz	r2, r2
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	f042 0220 	orr.w	r2, r2, #32
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	f002 021f 	and.w	r2, r2, #31
 8003a04:	2101      	movs	r1, #1
 8003a06:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d180      	bne.n	8003912 <HAL_RCC_OscConfig+0xf1a>
 8003a10:	e027      	b.n	8003a62 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e01e      	b.n	8003a64 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a26:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <HAL_RCC_OscConfig+0x1078>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a2e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a32:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d10b      	bne.n	8003a5e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a46:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d001      	beq.n	8003a62 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40021000 	.word	0x40021000

08003a74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b09e      	sub	sp, #120	; 0x78
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e162      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b90      	ldr	r3, [pc, #576]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d910      	bls.n	8003abc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9a:	4b8d      	ldr	r3, [pc, #564]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 0207 	bic.w	r2, r3, #7
 8003aa2:	498b      	ldr	r1, [pc, #556]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aaa:	4b89      	ldr	r3, [pc, #548]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e14a      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac8:	4b82      	ldr	r3, [pc, #520]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	497f      	ldr	r1, [pc, #508]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 80dc 	beq.w	8003ca0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d13c      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xf6>
 8003af0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003af4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b00:	fab3 f383 	clz	r3, r3
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d102      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xa6>
 8003b14:	4b6f      	ldr	r3, [pc, #444]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	e00f      	b.n	8003b3a <HAL_RCC_ClockConfig+0xc6>
 8003b1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b22:	fa93 f3a3 	rbit	r3, r3
 8003b26:	667b      	str	r3, [r7, #100]	; 0x64
 8003b28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b30:	fa93 f3a3 	rbit	r3, r3
 8003b34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b36:	4b67      	ldr	r3, [pc, #412]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b3e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b42:	fa92 f2a2 	rbit	r2, r2
 8003b46:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003b48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b4a:	fab2 f282 	clz	r2, r2
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	f042 0220 	orr.w	r2, r2, #32
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	f002 021f 	and.w	r2, r2, #31
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d17b      	bne.n	8003c5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e0f3      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d13c      	bne.n	8003bec <HAL_RCC_ClockConfig+0x178>
 8003b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b76:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d102      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x128>
 8003b96:	4b4f      	ldr	r3, [pc, #316]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	e00f      	b.n	8003bbc <HAL_RCC_ClockConfig+0x148>
 8003b9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ba0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba4:	fa93 f3a3 	rbit	r3, r3
 8003ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8003baa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bae:	643b      	str	r3, [r7, #64]	; 0x40
 8003bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb2:	fa93 f3a3 	rbit	r3, r3
 8003bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb8:	4b46      	ldr	r3, [pc, #280]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bc0:	63ba      	str	r2, [r7, #56]	; 0x38
 8003bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bc4:	fa92 f2a2 	rbit	r2, r2
 8003bc8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bcc:	fab2 f282 	clz	r2, r2
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	f042 0220 	orr.w	r2, r2, #32
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	f002 021f 	and.w	r2, r2, #31
 8003bdc:	2101      	movs	r1, #1
 8003bde:	fa01 f202 	lsl.w	r2, r1, r2
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d13a      	bne.n	8003c5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0b2      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
 8003bec:	2302      	movs	r3, #2
 8003bee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfa:	fab3 f383 	clz	r3, r3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d102      	bne.n	8003c14 <HAL_RCC_ClockConfig+0x1a0>
 8003c0e:	4b31      	ldr	r3, [pc, #196]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	e00d      	b.n	8003c30 <HAL_RCC_ClockConfig+0x1bc>
 8003c14:	2302      	movs	r3, #2
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	fa93 f3a3 	rbit	r3, r3
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c20:	2302      	movs	r3, #2
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	61fb      	str	r3, [r7, #28]
 8003c2c:	4b29      	ldr	r3, [pc, #164]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	2202      	movs	r2, #2
 8003c32:	61ba      	str	r2, [r7, #24]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	fa92 f2a2 	rbit	r2, r2
 8003c3a:	617a      	str	r2, [r7, #20]
  return result;
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	fab2 f282 	clz	r2, r2
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	f042 0220 	orr.w	r2, r2, #32
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	f002 021f 	and.w	r2, r2, #31
 8003c4e:	2101      	movs	r1, #1
 8003c50:	fa01 f202 	lsl.w	r2, r1, r2
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e079      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c5e:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f023 0203 	bic.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	491a      	ldr	r1, [pc, #104]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c70:	f7fd fac6 	bl	8001200 <HAL_GetTick>
 8003c74:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c78:	f7fd fac2 	bl	8001200 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e061      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 020c 	and.w	r2, r3, #12
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d1eb      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d214      	bcs.n	8003cd8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cae:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 0207 	bic.w	r2, r3, #7
 8003cb6:	4906      	ldr	r1, [pc, #24]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b04      	ldr	r3, [pc, #16]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e040      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
 8003cd0:	40022000 	.word	0x40022000
 8003cd4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <HAL_RCC_ClockConfig+0x2e8>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	491a      	ldr	r1, [pc, #104]	; (8003d5c <HAL_RCC_ClockConfig+0x2e8>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d02:	4b16      	ldr	r3, [pc, #88]	; (8003d5c <HAL_RCC_ClockConfig+0x2e8>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4912      	ldr	r1, [pc, #72]	; (8003d5c <HAL_RCC_ClockConfig+0x2e8>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d16:	f000 f829 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <HAL_RCC_ClockConfig+0x2e8>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d24:	22f0      	movs	r2, #240	; 0xf0
 8003d26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	fa92 f2a2 	rbit	r2, r2
 8003d2e:	60fa      	str	r2, [r7, #12]
  return result;
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	fab2 f282 	clz	r2, r2
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	40d3      	lsrs	r3, r2
 8003d3a:	4a09      	ldr	r2, [pc, #36]	; (8003d60 <HAL_RCC_ClockConfig+0x2ec>)
 8003d3c:	5cd3      	ldrb	r3, [r2, r3]
 8003d3e:	fa21 f303 	lsr.w	r3, r1, r3
 8003d42:	4a08      	ldr	r2, [pc, #32]	; (8003d64 <HAL_RCC_ClockConfig+0x2f0>)
 8003d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d46:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <HAL_RCC_ClockConfig+0x2f4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fd fa14 	bl	8001178 <HAL_InitTick>
  
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3778      	adds	r7, #120	; 0x78
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	08005de8 	.word	0x08005de8
 8003d64:	20000004 	.word	0x20000004
 8003d68:	20000008 	.word	0x20000008

08003d6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b08b      	sub	sp, #44	; 0x2c
 8003d70:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d86:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d002      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0x30>
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d003      	beq.n	8003da2 <HAL_RCC_GetSysClockFreq+0x36>
 8003d9a:	e03c      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d9c:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d9e:	623b      	str	r3, [r7, #32]
      break;
 8003da0:	e03c      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003da8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003dac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	fa92 f2a2 	rbit	r2, r2
 8003db4:	607a      	str	r2, [r7, #4]
  return result;
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	fab2 f282 	clz	r2, r2
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	40d3      	lsrs	r3, r2
 8003dc0:	4a1c      	ldr	r2, [pc, #112]	; (8003e34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003dc2:	5cd3      	ldrb	r3, [r2, r3]
 8003dc4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003dc6:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	220f      	movs	r2, #15
 8003dd0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	fa92 f2a2 	rbit	r2, r2
 8003dd8:	60fa      	str	r2, [r7, #12]
  return result;
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	fab2 f282 	clz	r2, r2
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	40d3      	lsrs	r3, r2
 8003de4:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003de6:	5cd3      	ldrb	r3, [r2, r3]
 8003de8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003df4:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
 8003e04:	e004      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	4a0c      	ldr	r2, [pc, #48]	; (8003e3c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	623b      	str	r3, [r7, #32]
      break;
 8003e14:	e002      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e16:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e18:	623b      	str	r3, [r7, #32]
      break;
 8003e1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	372c      	adds	r7, #44	; 0x2c
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	007a1200 	.word	0x007a1200
 8003e34:	08005e00 	.word	0x08005e00
 8003e38:	08005e10 	.word	0x08005e10
 8003e3c:	003d0900 	.word	0x003d0900

08003e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e44:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e46:	681b      	ldr	r3, [r3, #0]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	20000004 	.word	0x20000004

08003e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e5e:	f7ff ffef 	bl	8003e40 <HAL_RCC_GetHCLKFreq>
 8003e62:	4601      	mov	r1, r0
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e6c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e70:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	fa92 f2a2 	rbit	r2, r2
 8003e78:	603a      	str	r2, [r7, #0]
  return result;
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	fab2 f282 	clz	r2, r2
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	40d3      	lsrs	r3, r2
 8003e84:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e86:	5cd3      	ldrb	r3, [r2, r3]
 8003e88:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40021000 	.word	0x40021000
 8003e98:	08005df8 	.word	0x08005df8

08003e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003ea2:	f7ff ffcd 	bl	8003e40 <HAL_RCC_GetHCLKFreq>
 8003ea6:	4601      	mov	r1, r0
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003eb0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003eb4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	fa92 f2a2 	rbit	r2, r2
 8003ebc:	603a      	str	r2, [r7, #0]
  return result;
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	fab2 f282 	clz	r2, r2
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	40d3      	lsrs	r3, r2
 8003ec8:	4a04      	ldr	r2, [pc, #16]	; (8003edc <HAL_RCC_GetPCLK2Freq+0x40>)
 8003eca:	5cd3      	ldrb	r3, [r2, r3]
 8003ecc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	08005df8 	.word	0x08005df8

08003ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b092      	sub	sp, #72	; 0x48
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 80cd 	beq.w	800409e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f04:	4b86      	ldr	r3, [pc, #536]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10e      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f10:	4b83      	ldr	r3, [pc, #524]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	4a82      	ldr	r2, [pc, #520]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	61d3      	str	r3, [r2, #28]
 8003f1c:	4b80      	ldr	r3, [pc, #512]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2e:	4b7d      	ldr	r3, [pc, #500]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d118      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f3a:	4b7a      	ldr	r3, [pc, #488]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a79      	ldr	r2, [pc, #484]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f46:	f7fd f95b 	bl	8001200 <HAL_GetTick>
 8003f4a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4c:	e008      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f4e:	f7fd f957 	bl	8001200 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b64      	cmp	r3, #100	; 0x64
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e0db      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f60:	4b70      	ldr	r3, [pc, #448]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f6c:	4b6c      	ldr	r3, [pc, #432]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f74:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d07d      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d076      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f8a:	4b65      	ldr	r3, [pc, #404]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f98:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9c:	fa93 f3a3 	rbit	r3, r3
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fa4:	fab3 f383 	clz	r3, r3
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	4b5e      	ldr	r3, [pc, #376]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc0:	fa93 f3a3 	rbit	r3, r3
 8003fc4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fc8:	fab3 f383 	clz	r3, r3
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4b55      	ldr	r3, [pc, #340]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	2300      	movs	r3, #0
 8003fda:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fdc:	4a50      	ldr	r2, [pc, #320]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d045      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fd f908 	bl	8001200 <HAL_GetTick>
 8003ff0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff2:	e00a      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff4:	f7fd f904 	bl	8001200 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e086      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800400a:	2302      	movs	r3, #2
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004010:	fa93 f3a3 	rbit	r3, r3
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
 8004016:	2302      	movs	r3, #2
 8004018:	623b      	str	r3, [r7, #32]
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	fa93 f3a3 	rbit	r3, r3
 8004020:	61fb      	str	r3, [r7, #28]
  return result;
 8004022:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004024:	fab3 f383 	clz	r3, r3
 8004028:	b2db      	uxtb	r3, r3
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	b2db      	uxtb	r3, r3
 800402e:	f043 0302 	orr.w	r3, r3, #2
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d102      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004038:	4b39      	ldr	r3, [pc, #228]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	e007      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800403e:	2302      	movs	r3, #2
 8004040:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	4b35      	ldr	r3, [pc, #212]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	2202      	movs	r2, #2
 8004050:	613a      	str	r2, [r7, #16]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	fa92 f2a2 	rbit	r2, r2
 8004058:	60fa      	str	r2, [r7, #12]
  return result;
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	fab2 f282 	clz	r2, r2
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	f002 021f 	and.w	r2, r2, #31
 800406c:	2101      	movs	r1, #1
 800406e:	fa01 f202 	lsl.w	r2, r1, r2
 8004072:	4013      	ands	r3, r2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0bd      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004078:	4b29      	ldr	r3, [pc, #164]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	4926      	ldr	r1, [pc, #152]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004086:	4313      	orrs	r3, r2
 8004088:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800408a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800408e:	2b01      	cmp	r3, #1
 8004090:	d105      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004092:	4b23      	ldr	r3, [pc, #140]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	4a22      	ldr	r2, [pc, #136]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040aa:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	f023 0203 	bic.w	r2, r3, #3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	491a      	ldr	r1, [pc, #104]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040c8:	4b15      	ldr	r3, [pc, #84]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	f023 0210 	bic.w	r2, r3, #16
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4912      	ldr	r1, [pc, #72]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040e6:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	490b      	ldr	r1, [pc, #44]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	4903      	ldr	r1, [pc, #12]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004112:	4313      	orrs	r3, r2
 8004114:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3748      	adds	r7, #72	; 0x48
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000
 8004124:	40007000 	.word	0x40007000
 8004128:	10908100 	.word	0x10908100

0800412c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e049      	b.n	80041d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fc fdce 	bl	8000cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f000 fd88 	bl	8004c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d001      	beq.n	80041f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e038      	b.n	8004266 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <HAL_TIM_Base_Start+0x98>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00e      	beq.n	8004224 <HAL_TIM_Base_Start+0x48>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420e:	d009      	beq.n	8004224 <HAL_TIM_Base_Start+0x48>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a18      	ldr	r2, [pc, #96]	; (8004278 <HAL_TIM_Base_Start+0x9c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d004      	beq.n	8004224 <HAL_TIM_Base_Start+0x48>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a17      	ldr	r2, [pc, #92]	; (800427c <HAL_TIM_Base_Start+0xa0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d115      	bne.n	8004250 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	4b15      	ldr	r3, [pc, #84]	; (8004280 <HAL_TIM_Base_Start+0xa4>)
 800422c:	4013      	ands	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b06      	cmp	r3, #6
 8004234:	d015      	beq.n	8004262 <HAL_TIM_Base_Start+0x86>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423c:	d011      	beq.n	8004262 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0201 	orr.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424e:	e008      	b.n	8004262 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	e000      	b.n	8004264 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004262:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40000400 	.word	0x40000400
 800427c:	40014000 	.word	0x40014000
 8004280:	00010007 	.word	0x00010007

08004284 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	d001      	beq.n	800429c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e040      	b.n	800431e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1c      	ldr	r2, [pc, #112]	; (800432c <HAL_TIM_Base_Start_IT+0xa8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00e      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x58>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c6:	d009      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x58>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a18      	ldr	r2, [pc, #96]	; (8004330 <HAL_TIM_Base_Start_IT+0xac>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x58>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a17      	ldr	r2, [pc, #92]	; (8004334 <HAL_TIM_Base_Start_IT+0xb0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d115      	bne.n	8004308 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	4b15      	ldr	r3, [pc, #84]	; (8004338 <HAL_TIM_Base_Start_IT+0xb4>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b06      	cmp	r3, #6
 80042ec:	d015      	beq.n	800431a <HAL_TIM_Base_Start_IT+0x96>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f4:	d011      	beq.n	800431a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004306:	e008      	b.n	800431a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	e000      	b.n	800431c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40000400 	.word	0x40000400
 8004334:	40014000 	.word	0x40014000
 8004338:	00010007 	.word	0x00010007

0800433c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0201 	bic.w	r2, r2, #1
 8004352:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6a1a      	ldr	r2, [r3, #32]
 800435a:	f241 1311 	movw	r3, #4369	; 0x1111
 800435e:	4013      	ands	r3, r2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10f      	bne.n	8004384 <HAL_TIM_Base_Stop_IT+0x48>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6a1a      	ldr	r2, [r3, #32]
 800436a:	f240 4344 	movw	r3, #1092	; 0x444
 800436e:	4013      	ands	r3, r2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d107      	bne.n	8004384 <HAL_TIM_Base_Stop_IT+0x48>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0201 	bic.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e049      	b.n	8004440 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d106      	bne.n	80043c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f841 	bl	8004448 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2202      	movs	r2, #2
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3304      	adds	r3, #4
 80043d6:	4619      	mov	r1, r3
 80043d8:	4610      	mov	r0, r2
 80043da:	f000 fc51 	bl	8004c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d109      	bne.n	8004480 <HAL_TIM_PWM_Start+0x24>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b01      	cmp	r3, #1
 8004476:	bf14      	ite	ne
 8004478:	2301      	movne	r3, #1
 800447a:	2300      	moveq	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	e03c      	b.n	80044fa <HAL_TIM_PWM_Start+0x9e>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b04      	cmp	r3, #4
 8004484:	d109      	bne.n	800449a <HAL_TIM_PWM_Start+0x3e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b01      	cmp	r3, #1
 8004490:	bf14      	ite	ne
 8004492:	2301      	movne	r3, #1
 8004494:	2300      	moveq	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	e02f      	b.n	80044fa <HAL_TIM_PWM_Start+0x9e>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b08      	cmp	r3, #8
 800449e:	d109      	bne.n	80044b4 <HAL_TIM_PWM_Start+0x58>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	bf14      	ite	ne
 80044ac:	2301      	movne	r3, #1
 80044ae:	2300      	moveq	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	e022      	b.n	80044fa <HAL_TIM_PWM_Start+0x9e>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b0c      	cmp	r3, #12
 80044b8:	d109      	bne.n	80044ce <HAL_TIM_PWM_Start+0x72>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	bf14      	ite	ne
 80044c6:	2301      	movne	r3, #1
 80044c8:	2300      	moveq	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	e015      	b.n	80044fa <HAL_TIM_PWM_Start+0x9e>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b10      	cmp	r3, #16
 80044d2:	d109      	bne.n	80044e8 <HAL_TIM_PWM_Start+0x8c>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	bf14      	ite	ne
 80044e0:	2301      	movne	r3, #1
 80044e2:	2300      	moveq	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	e008      	b.n	80044fa <HAL_TIM_PWM_Start+0x9e>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	bf14      	ite	ne
 80044f4:	2301      	movne	r3, #1
 80044f6:	2300      	moveq	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e088      	b.n	8004614 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d104      	bne.n	8004512 <HAL_TIM_PWM_Start+0xb6>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004510:	e023      	b.n	800455a <HAL_TIM_PWM_Start+0xfe>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b04      	cmp	r3, #4
 8004516:	d104      	bne.n	8004522 <HAL_TIM_PWM_Start+0xc6>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004520:	e01b      	b.n	800455a <HAL_TIM_PWM_Start+0xfe>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d104      	bne.n	8004532 <HAL_TIM_PWM_Start+0xd6>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004530:	e013      	b.n	800455a <HAL_TIM_PWM_Start+0xfe>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b0c      	cmp	r3, #12
 8004536:	d104      	bne.n	8004542 <HAL_TIM_PWM_Start+0xe6>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004540:	e00b      	b.n	800455a <HAL_TIM_PWM_Start+0xfe>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b10      	cmp	r3, #16
 8004546:	d104      	bne.n	8004552 <HAL_TIM_PWM_Start+0xf6>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004550:	e003      	b.n	800455a <HAL_TIM_PWM_Start+0xfe>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2202      	movs	r2, #2
 8004556:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2201      	movs	r2, #1
 8004560:	6839      	ldr	r1, [r7, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f000 ff44 	bl	80053f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a2b      	ldr	r2, [pc, #172]	; (800461c <HAL_TIM_PWM_Start+0x1c0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00e      	beq.n	8004590 <HAL_TIM_PWM_Start+0x134>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a2a      	ldr	r2, [pc, #168]	; (8004620 <HAL_TIM_PWM_Start+0x1c4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d009      	beq.n	8004590 <HAL_TIM_PWM_Start+0x134>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a28      	ldr	r2, [pc, #160]	; (8004624 <HAL_TIM_PWM_Start+0x1c8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_TIM_PWM_Start+0x134>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a27      	ldr	r2, [pc, #156]	; (8004628 <HAL_TIM_PWM_Start+0x1cc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d101      	bne.n	8004594 <HAL_TIM_PWM_Start+0x138>
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <HAL_TIM_PWM_Start+0x13a>
 8004594:	2300      	movs	r3, #0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1b      	ldr	r2, [pc, #108]	; (800461c <HAL_TIM_PWM_Start+0x1c0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00e      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x176>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045bc:	d009      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x176>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1a      	ldr	r2, [pc, #104]	; (800462c <HAL_TIM_PWM_Start+0x1d0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d004      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x176>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a14      	ldr	r2, [pc, #80]	; (8004620 <HAL_TIM_PWM_Start+0x1c4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d115      	bne.n	80045fe <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	4b15      	ldr	r3, [pc, #84]	; (8004630 <HAL_TIM_PWM_Start+0x1d4>)
 80045da:	4013      	ands	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b06      	cmp	r3, #6
 80045e2:	d015      	beq.n	8004610 <HAL_TIM_PWM_Start+0x1b4>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ea:	d011      	beq.n	8004610 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fc:	e008      	b.n	8004610 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f042 0201 	orr.w	r2, r2, #1
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	e000      	b.n	8004612 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004610:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40012c00 	.word	0x40012c00
 8004620:	40014000 	.word	0x40014000
 8004624:	40014400 	.word	0x40014400
 8004628:	40014800 	.word	0x40014800
 800462c:	40000400 	.word	0x40000400
 8004630:	00010007 	.word	0x00010007

08004634 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b02      	cmp	r3, #2
 8004648:	d122      	bne.n	8004690 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b02      	cmp	r3, #2
 8004656:	d11b      	bne.n	8004690 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0202 	mvn.w	r2, #2
 8004660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fae3 	bl	8004c42 <HAL_TIM_IC_CaptureCallback>
 800467c:	e005      	b.n	800468a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fad5 	bl	8004c2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fae6 	bl	8004c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b04      	cmp	r3, #4
 800469c:	d122      	bne.n	80046e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d11b      	bne.n	80046e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0204 	mvn.w	r2, #4
 80046b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2202      	movs	r2, #2
 80046ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fab9 	bl	8004c42 <HAL_TIM_IC_CaptureCallback>
 80046d0:	e005      	b.n	80046de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 faab 	bl	8004c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fabc 	bl	8004c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d122      	bne.n	8004738 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d11b      	bne.n	8004738 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0208 	mvn.w	r2, #8
 8004708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2204      	movs	r2, #4
 800470e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fa8f 	bl	8004c42 <HAL_TIM_IC_CaptureCallback>
 8004724:	e005      	b.n	8004732 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fa81 	bl	8004c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fa92 	bl	8004c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	2b10      	cmp	r3, #16
 8004744:	d122      	bne.n	800478c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	2b10      	cmp	r3, #16
 8004752:	d11b      	bne.n	800478c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f06f 0210 	mvn.w	r2, #16
 800475c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2208      	movs	r2, #8
 8004762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fa65 	bl	8004c42 <HAL_TIM_IC_CaptureCallback>
 8004778:	e005      	b.n	8004786 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fa57 	bl	8004c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fa68 	bl	8004c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b01      	cmp	r3, #1
 8004798:	d10e      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d107      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0201 	mvn.w	r2, #1
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fb fd26 	bl	8000204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c2:	2b80      	cmp	r3, #128	; 0x80
 80047c4:	d10e      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d0:	2b80      	cmp	r3, #128	; 0x80
 80047d2:	d107      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 ff1c 	bl	800561c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f2:	d10e      	bne.n	8004812 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fe:	2b80      	cmp	r3, #128	; 0x80
 8004800:	d107      	bne.n	8004812 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800480a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 ff0f 	bl	8005630 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481c:	2b40      	cmp	r3, #64	; 0x40
 800481e:	d10e      	bne.n	800483e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482a:	2b40      	cmp	r3, #64	; 0x40
 800482c:	d107      	bne.n	800483e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fa16 	bl	8004c6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b20      	cmp	r3, #32
 800484a:	d10e      	bne.n	800486a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b20      	cmp	r3, #32
 8004858:	d107      	bne.n	800486a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f06f 0220 	mvn.w	r2, #32
 8004862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fecf 	bl	8005608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800486a:	bf00      	nop
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800488e:	2302      	movs	r3, #2
 8004890:	e0ff      	b.n	8004a92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b14      	cmp	r3, #20
 800489e:	f200 80f0 	bhi.w	8004a82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80048a2:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048fd 	.word	0x080048fd
 80048ac:	08004a83 	.word	0x08004a83
 80048b0:	08004a83 	.word	0x08004a83
 80048b4:	08004a83 	.word	0x08004a83
 80048b8:	0800493d 	.word	0x0800493d
 80048bc:	08004a83 	.word	0x08004a83
 80048c0:	08004a83 	.word	0x08004a83
 80048c4:	08004a83 	.word	0x08004a83
 80048c8:	0800497f 	.word	0x0800497f
 80048cc:	08004a83 	.word	0x08004a83
 80048d0:	08004a83 	.word	0x08004a83
 80048d4:	08004a83 	.word	0x08004a83
 80048d8:	080049bf 	.word	0x080049bf
 80048dc:	08004a83 	.word	0x08004a83
 80048e0:	08004a83 	.word	0x08004a83
 80048e4:	08004a83 	.word	0x08004a83
 80048e8:	08004a01 	.word	0x08004a01
 80048ec:	08004a83 	.word	0x08004a83
 80048f0:	08004a83 	.word	0x08004a83
 80048f4:	08004a83 	.word	0x08004a83
 80048f8:	08004a41 	.word	0x08004a41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68b9      	ldr	r1, [r7, #8]
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fa34 	bl	8004d70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0208 	orr.w	r2, r2, #8
 8004916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699a      	ldr	r2, [r3, #24]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0204 	bic.w	r2, r2, #4
 8004926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6999      	ldr	r1, [r3, #24]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	619a      	str	r2, [r3, #24]
      break;
 800493a:	e0a5      	b.n	8004a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fa9a 	bl	8004e7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699a      	ldr	r2, [r3, #24]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6999      	ldr	r1, [r3, #24]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	021a      	lsls	r2, r3, #8
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	619a      	str	r2, [r3, #24]
      break;
 800497c:	e084      	b.n	8004a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68b9      	ldr	r1, [r7, #8]
 8004984:	4618      	mov	r0, r3
 8004986:	f000 faf9 	bl	8004f7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f042 0208 	orr.w	r2, r2, #8
 8004998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	69da      	ldr	r2, [r3, #28]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0204 	bic.w	r2, r2, #4
 80049a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69d9      	ldr	r1, [r3, #28]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	61da      	str	r2, [r3, #28]
      break;
 80049bc:	e064      	b.n	8004a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fb57 	bl	8005078 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69da      	ldr	r2, [r3, #28]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69da      	ldr	r2, [r3, #28]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	69d9      	ldr	r1, [r3, #28]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	021a      	lsls	r2, r3, #8
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	61da      	str	r2, [r3, #28]
      break;
 80049fe:	e043      	b.n	8004a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fb9a 	bl	8005140 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0208 	orr.w	r2, r2, #8
 8004a1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0204 	bic.w	r2, r2, #4
 8004a2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	691a      	ldr	r2, [r3, #16]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a3e:	e023      	b.n	8004a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fbd8 	bl	80051fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	021a      	lsls	r2, r3, #8
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a80:	e002      	b.n	8004a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	75fb      	strb	r3, [r7, #23]
      break;
 8004a86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop

08004a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e0b6      	b.n	8004c26 <HAL_TIM_ConfigClockSource+0x18a>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ae2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af4:	d03e      	beq.n	8004b74 <HAL_TIM_ConfigClockSource+0xd8>
 8004af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afa:	f200 8087 	bhi.w	8004c0c <HAL_TIM_ConfigClockSource+0x170>
 8004afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b02:	f000 8086 	beq.w	8004c12 <HAL_TIM_ConfigClockSource+0x176>
 8004b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0a:	d87f      	bhi.n	8004c0c <HAL_TIM_ConfigClockSource+0x170>
 8004b0c:	2b70      	cmp	r3, #112	; 0x70
 8004b0e:	d01a      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0xaa>
 8004b10:	2b70      	cmp	r3, #112	; 0x70
 8004b12:	d87b      	bhi.n	8004c0c <HAL_TIM_ConfigClockSource+0x170>
 8004b14:	2b60      	cmp	r3, #96	; 0x60
 8004b16:	d050      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0x11e>
 8004b18:	2b60      	cmp	r3, #96	; 0x60
 8004b1a:	d877      	bhi.n	8004c0c <HAL_TIM_ConfigClockSource+0x170>
 8004b1c:	2b50      	cmp	r3, #80	; 0x50
 8004b1e:	d03c      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0xfe>
 8004b20:	2b50      	cmp	r3, #80	; 0x50
 8004b22:	d873      	bhi.n	8004c0c <HAL_TIM_ConfigClockSource+0x170>
 8004b24:	2b40      	cmp	r3, #64	; 0x40
 8004b26:	d058      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x13e>
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	d86f      	bhi.n	8004c0c <HAL_TIM_ConfigClockSource+0x170>
 8004b2c:	2b30      	cmp	r3, #48	; 0x30
 8004b2e:	d064      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0x15e>
 8004b30:	2b30      	cmp	r3, #48	; 0x30
 8004b32:	d86b      	bhi.n	8004c0c <HAL_TIM_ConfigClockSource+0x170>
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d060      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0x15e>
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d867      	bhi.n	8004c0c <HAL_TIM_ConfigClockSource+0x170>
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d05c      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0x15e>
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d05a      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0x15e>
 8004b44:	e062      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b56:	f000 fc2b 	bl	80053b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	609a      	str	r2, [r3, #8]
      break;
 8004b72:	e04f      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b84:	f000 fc14 	bl	80053b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b96:	609a      	str	r2, [r3, #8]
      break;
 8004b98:	e03c      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f000 fb88 	bl	80052bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2150      	movs	r1, #80	; 0x50
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fbe1 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 8004bb8:	e02c      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f000 fba7 	bl	800531a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2160      	movs	r1, #96	; 0x60
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fbd1 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 8004bd8:	e01c      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be6:	461a      	mov	r2, r3
 8004be8:	f000 fb68 	bl	80052bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2140      	movs	r1, #64	; 0x40
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fbc1 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 8004bf8:	e00c      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4619      	mov	r1, r3
 8004c04:	4610      	mov	r0, r2
 8004c06:	f000 fbb8 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 8004c0a:	e003      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c10:	e000      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004c12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a32      	ldr	r2, [pc, #200]	; (8004d5c <TIM_Base_SetConfig+0xdc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d007      	beq.n	8004ca8 <TIM_Base_SetConfig+0x28>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9e:	d003      	beq.n	8004ca8 <TIM_Base_SetConfig+0x28>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a2f      	ldr	r2, [pc, #188]	; (8004d60 <TIM_Base_SetConfig+0xe0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d108      	bne.n	8004cba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a27      	ldr	r2, [pc, #156]	; (8004d5c <TIM_Base_SetConfig+0xdc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d013      	beq.n	8004cea <TIM_Base_SetConfig+0x6a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc8:	d00f      	beq.n	8004cea <TIM_Base_SetConfig+0x6a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a24      	ldr	r2, [pc, #144]	; (8004d60 <TIM_Base_SetConfig+0xe0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00b      	beq.n	8004cea <TIM_Base_SetConfig+0x6a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a23      	ldr	r2, [pc, #140]	; (8004d64 <TIM_Base_SetConfig+0xe4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d007      	beq.n	8004cea <TIM_Base_SetConfig+0x6a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a22      	ldr	r2, [pc, #136]	; (8004d68 <TIM_Base_SetConfig+0xe8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d003      	beq.n	8004cea <TIM_Base_SetConfig+0x6a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a21      	ldr	r2, [pc, #132]	; (8004d6c <TIM_Base_SetConfig+0xec>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d108      	bne.n	8004cfc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a0e      	ldr	r2, [pc, #56]	; (8004d5c <TIM_Base_SetConfig+0xdc>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00b      	beq.n	8004d40 <TIM_Base_SetConfig+0xc0>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a0e      	ldr	r2, [pc, #56]	; (8004d64 <TIM_Base_SetConfig+0xe4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d007      	beq.n	8004d40 <TIM_Base_SetConfig+0xc0>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a0d      	ldr	r2, [pc, #52]	; (8004d68 <TIM_Base_SetConfig+0xe8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d003      	beq.n	8004d40 <TIM_Base_SetConfig+0xc0>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a0c      	ldr	r2, [pc, #48]	; (8004d6c <TIM_Base_SetConfig+0xec>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d103      	bne.n	8004d48 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	615a      	str	r2, [r3, #20]
}
 8004d4e:	bf00      	nop
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40012c00 	.word	0x40012c00
 8004d60:	40000400 	.word	0x40000400
 8004d64:	40014000 	.word	0x40014000
 8004d68:	40014400 	.word	0x40014400
 8004d6c:	40014800 	.word	0x40014800

08004d70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f023 0201 	bic.w	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0303 	bic.w	r3, r3, #3
 8004daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f023 0302 	bic.w	r3, r3, #2
 8004dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a28      	ldr	r2, [pc, #160]	; (8004e6c <TIM_OC1_SetConfig+0xfc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d00b      	beq.n	8004de8 <TIM_OC1_SetConfig+0x78>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a27      	ldr	r2, [pc, #156]	; (8004e70 <TIM_OC1_SetConfig+0x100>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d007      	beq.n	8004de8 <TIM_OC1_SetConfig+0x78>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a26      	ldr	r2, [pc, #152]	; (8004e74 <TIM_OC1_SetConfig+0x104>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d003      	beq.n	8004de8 <TIM_OC1_SetConfig+0x78>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a25      	ldr	r2, [pc, #148]	; (8004e78 <TIM_OC1_SetConfig+0x108>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d10c      	bne.n	8004e02 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f023 0308 	bic.w	r3, r3, #8
 8004dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f023 0304 	bic.w	r3, r3, #4
 8004e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a19      	ldr	r2, [pc, #100]	; (8004e6c <TIM_OC1_SetConfig+0xfc>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00b      	beq.n	8004e22 <TIM_OC1_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a18      	ldr	r2, [pc, #96]	; (8004e70 <TIM_OC1_SetConfig+0x100>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d007      	beq.n	8004e22 <TIM_OC1_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a17      	ldr	r2, [pc, #92]	; (8004e74 <TIM_OC1_SetConfig+0x104>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d003      	beq.n	8004e22 <TIM_OC1_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a16      	ldr	r2, [pc, #88]	; (8004e78 <TIM_OC1_SetConfig+0x108>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d111      	bne.n	8004e46 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	621a      	str	r2, [r3, #32]
}
 8004e60:	bf00      	nop
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	40012c00 	.word	0x40012c00
 8004e70:	40014000 	.word	0x40014000
 8004e74:	40014400 	.word	0x40014400
 8004e78:	40014800 	.word	0x40014800

08004e7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	f023 0210 	bic.w	r2, r3, #16
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f023 0320 	bic.w	r3, r3, #32
 8004eca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a24      	ldr	r2, [pc, #144]	; (8004f6c <TIM_OC2_SetConfig+0xf0>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d10d      	bne.n	8004efc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004efa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a1b      	ldr	r2, [pc, #108]	; (8004f6c <TIM_OC2_SetConfig+0xf0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00b      	beq.n	8004f1c <TIM_OC2_SetConfig+0xa0>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a1a      	ldr	r2, [pc, #104]	; (8004f70 <TIM_OC2_SetConfig+0xf4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d007      	beq.n	8004f1c <TIM_OC2_SetConfig+0xa0>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a19      	ldr	r2, [pc, #100]	; (8004f74 <TIM_OC2_SetConfig+0xf8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <TIM_OC2_SetConfig+0xa0>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a18      	ldr	r2, [pc, #96]	; (8004f78 <TIM_OC2_SetConfig+0xfc>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d113      	bne.n	8004f44 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f22:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f2a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40012c00 	.word	0x40012c00
 8004f70:	40014000 	.word	0x40014000
 8004f74:	40014400 	.word	0x40014400
 8004f78:	40014800 	.word	0x40014800

08004f7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0303 	bic.w	r3, r3, #3
 8004fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a23      	ldr	r2, [pc, #140]	; (8005068 <TIM_OC3_SetConfig+0xec>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d10d      	bne.n	8004ffa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fe4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ff8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a1a      	ldr	r2, [pc, #104]	; (8005068 <TIM_OC3_SetConfig+0xec>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00b      	beq.n	800501a <TIM_OC3_SetConfig+0x9e>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a19      	ldr	r2, [pc, #100]	; (800506c <TIM_OC3_SetConfig+0xf0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d007      	beq.n	800501a <TIM_OC3_SetConfig+0x9e>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a18      	ldr	r2, [pc, #96]	; (8005070 <TIM_OC3_SetConfig+0xf4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d003      	beq.n	800501a <TIM_OC3_SetConfig+0x9e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a17      	ldr	r2, [pc, #92]	; (8005074 <TIM_OC3_SetConfig+0xf8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d113      	bne.n	8005042 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	621a      	str	r2, [r3, #32]
}
 800505c:	bf00      	nop
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	40012c00 	.word	0x40012c00
 800506c:	40014000 	.word	0x40014000
 8005070:	40014400 	.word	0x40014400
 8005074:	40014800 	.word	0x40014800

08005078 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	021b      	lsls	r3, r3, #8
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	031b      	lsls	r3, r3, #12
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a16      	ldr	r2, [pc, #88]	; (8005130 <TIM_OC4_SetConfig+0xb8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00b      	beq.n	80050f4 <TIM_OC4_SetConfig+0x7c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a15      	ldr	r2, [pc, #84]	; (8005134 <TIM_OC4_SetConfig+0xbc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d007      	beq.n	80050f4 <TIM_OC4_SetConfig+0x7c>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a14      	ldr	r2, [pc, #80]	; (8005138 <TIM_OC4_SetConfig+0xc0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d003      	beq.n	80050f4 <TIM_OC4_SetConfig+0x7c>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a13      	ldr	r2, [pc, #76]	; (800513c <TIM_OC4_SetConfig+0xc4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d109      	bne.n	8005108 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	019b      	lsls	r3, r3, #6
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	bf00      	nop
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40012c00 	.word	0x40012c00
 8005134:	40014000 	.word	0x40014000
 8005138:	40014400 	.word	0x40014400
 800513c:	40014800 	.word	0x40014800

08005140 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800516e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005184:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a15      	ldr	r2, [pc, #84]	; (80051ec <TIM_OC5_SetConfig+0xac>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00b      	beq.n	80051b2 <TIM_OC5_SetConfig+0x72>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a14      	ldr	r2, [pc, #80]	; (80051f0 <TIM_OC5_SetConfig+0xb0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d007      	beq.n	80051b2 <TIM_OC5_SetConfig+0x72>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a13      	ldr	r2, [pc, #76]	; (80051f4 <TIM_OC5_SetConfig+0xb4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_OC5_SetConfig+0x72>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a12      	ldr	r2, [pc, #72]	; (80051f8 <TIM_OC5_SetConfig+0xb8>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d109      	bne.n	80051c6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	621a      	str	r2, [r3, #32]
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	40014000 	.word	0x40014000
 80051f4:	40014400 	.word	0x40014400
 80051f8:	40014800 	.word	0x40014800

080051fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800522a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4313      	orrs	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	051b      	lsls	r3, r3, #20
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a16      	ldr	r2, [pc, #88]	; (80052ac <TIM_OC6_SetConfig+0xb0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00b      	beq.n	8005270 <TIM_OC6_SetConfig+0x74>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a15      	ldr	r2, [pc, #84]	; (80052b0 <TIM_OC6_SetConfig+0xb4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d007      	beq.n	8005270 <TIM_OC6_SetConfig+0x74>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a14      	ldr	r2, [pc, #80]	; (80052b4 <TIM_OC6_SetConfig+0xb8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d003      	beq.n	8005270 <TIM_OC6_SetConfig+0x74>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a13      	ldr	r2, [pc, #76]	; (80052b8 <TIM_OC6_SetConfig+0xbc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d109      	bne.n	8005284 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005276:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	029b      	lsls	r3, r3, #10
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40012c00 	.word	0x40012c00
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40014400 	.word	0x40014400
 80052b8:	40014800 	.word	0x40014800

080052bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f023 0201 	bic.w	r2, r3, #1
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f023 030a 	bic.w	r3, r3, #10
 80052f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800531a:	b480      	push	{r7}
 800531c:	b087      	sub	sp, #28
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f023 0210 	bic.w	r2, r3, #16
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005344:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	031b      	lsls	r3, r3, #12
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005356:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800537a:	b480      	push	{r7}
 800537c:	b085      	sub	sp, #20
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	f043 0307 	orr.w	r3, r3, #7
 800539c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	609a      	str	r2, [r3, #8]
}
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	021a      	lsls	r2, r3, #8
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	609a      	str	r2, [r3, #8]
}
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	2201      	movs	r2, #1
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1a      	ldr	r2, [r3, #32]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	43db      	mvns	r3, r3
 8005412:	401a      	ands	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a1a      	ldr	r2, [r3, #32]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	fa01 f303 	lsl.w	r3, r1, r3
 8005428:	431a      	orrs	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005450:	2302      	movs	r3, #2
 8005452:	e054      	b.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a24      	ldr	r2, [pc, #144]	; (800550c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d108      	bne.n	8005490 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005484:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a17      	ldr	r2, [pc, #92]	; (800550c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00e      	beq.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054bc:	d009      	beq.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a13      	ldr	r2, [pc, #76]	; (8005510 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d004      	beq.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a11      	ldr	r2, [pc, #68]	; (8005514 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d10c      	bne.n	80054ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40012c00 	.word	0x40012c00
 8005510:	40000400 	.word	0x40000400
 8005514:	40014000 	.word	0x40014000

08005518 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005530:	2302      	movs	r3, #2
 8005532:	e060      	b.n	80055f6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	041b      	lsls	r3, r3, #16
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a14      	ldr	r2, [pc, #80]	; (8005604 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d115      	bne.n	80055e4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	051b      	lsls	r3, r3, #20
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	40012c00 	.word	0x40012c00

08005608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e040      	b.n	80056d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fb fc6c 	bl	8000f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2224      	movs	r2, #36	; 0x24
 8005670:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0201 	bic.w	r2, r2, #1
 8005680:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f82c 	bl	80056e0 <UART_SetConfig>
 8005688:	4603      	mov	r3, r0
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e022      	b.n	80056d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f956 	bl	800594c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f9dd 	bl	8005a90 <UART_CheckIdleState>
 80056d6:	4603      	mov	r3, r0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	431a      	orrs	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	4b8a      	ldr	r3, [pc, #552]	; (8005934 <UART_SetConfig+0x254>)
 800570c:	4013      	ands	r3, r2
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	6979      	ldr	r1, [r7, #20]
 8005714:	430b      	orrs	r3, r1
 8005716:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	430a      	orrs	r2, r1
 8005750:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a78      	ldr	r2, [pc, #480]	; (8005938 <UART_SetConfig+0x258>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d120      	bne.n	800579e <UART_SetConfig+0xbe>
 800575c:	4b77      	ldr	r3, [pc, #476]	; (800593c <UART_SetConfig+0x25c>)
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	f003 0303 	and.w	r3, r3, #3
 8005764:	2b03      	cmp	r3, #3
 8005766:	d817      	bhi.n	8005798 <UART_SetConfig+0xb8>
 8005768:	a201      	add	r2, pc, #4	; (adr r2, 8005770 <UART_SetConfig+0x90>)
 800576a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576e:	bf00      	nop
 8005770:	08005781 	.word	0x08005781
 8005774:	0800578d 	.word	0x0800578d
 8005778:	08005793 	.word	0x08005793
 800577c:	08005787 	.word	0x08005787
 8005780:	2300      	movs	r3, #0
 8005782:	77fb      	strb	r3, [r7, #31]
 8005784:	e01d      	b.n	80057c2 <UART_SetConfig+0xe2>
 8005786:	2302      	movs	r3, #2
 8005788:	77fb      	strb	r3, [r7, #31]
 800578a:	e01a      	b.n	80057c2 <UART_SetConfig+0xe2>
 800578c:	2304      	movs	r3, #4
 800578e:	77fb      	strb	r3, [r7, #31]
 8005790:	e017      	b.n	80057c2 <UART_SetConfig+0xe2>
 8005792:	2308      	movs	r3, #8
 8005794:	77fb      	strb	r3, [r7, #31]
 8005796:	e014      	b.n	80057c2 <UART_SetConfig+0xe2>
 8005798:	2310      	movs	r3, #16
 800579a:	77fb      	strb	r3, [r7, #31]
 800579c:	e011      	b.n	80057c2 <UART_SetConfig+0xe2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a67      	ldr	r2, [pc, #412]	; (8005940 <UART_SetConfig+0x260>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d102      	bne.n	80057ae <UART_SetConfig+0xce>
 80057a8:	2300      	movs	r3, #0
 80057aa:	77fb      	strb	r3, [r7, #31]
 80057ac:	e009      	b.n	80057c2 <UART_SetConfig+0xe2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a64      	ldr	r2, [pc, #400]	; (8005944 <UART_SetConfig+0x264>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d102      	bne.n	80057be <UART_SetConfig+0xde>
 80057b8:	2300      	movs	r3, #0
 80057ba:	77fb      	strb	r3, [r7, #31]
 80057bc:	e001      	b.n	80057c2 <UART_SetConfig+0xe2>
 80057be:	2310      	movs	r3, #16
 80057c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ca:	d15a      	bne.n	8005882 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80057cc:	7ffb      	ldrb	r3, [r7, #31]
 80057ce:	2b08      	cmp	r3, #8
 80057d0:	d827      	bhi.n	8005822 <UART_SetConfig+0x142>
 80057d2:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <UART_SetConfig+0xf8>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	080057fd 	.word	0x080057fd
 80057dc:	08005805 	.word	0x08005805
 80057e0:	0800580d 	.word	0x0800580d
 80057e4:	08005823 	.word	0x08005823
 80057e8:	08005813 	.word	0x08005813
 80057ec:	08005823 	.word	0x08005823
 80057f0:	08005823 	.word	0x08005823
 80057f4:	08005823 	.word	0x08005823
 80057f8:	0800581b 	.word	0x0800581b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057fc:	f7fe fb2c 	bl	8003e58 <HAL_RCC_GetPCLK1Freq>
 8005800:	61b8      	str	r0, [r7, #24]
        break;
 8005802:	e013      	b.n	800582c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005804:	f7fe fb4a 	bl	8003e9c <HAL_RCC_GetPCLK2Freq>
 8005808:	61b8      	str	r0, [r7, #24]
        break;
 800580a:	e00f      	b.n	800582c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800580c:	4b4e      	ldr	r3, [pc, #312]	; (8005948 <UART_SetConfig+0x268>)
 800580e:	61bb      	str	r3, [r7, #24]
        break;
 8005810:	e00c      	b.n	800582c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005812:	f7fe faab 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8005816:	61b8      	str	r0, [r7, #24]
        break;
 8005818:	e008      	b.n	800582c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800581a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800581e:	61bb      	str	r3, [r7, #24]
        break;
 8005820:	e004      	b.n	800582c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	77bb      	strb	r3, [r7, #30]
        break;
 800582a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d074      	beq.n	800591c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	005a      	lsls	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	085b      	lsrs	r3, r3, #1
 800583c:	441a      	add	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	fbb2 f3f3 	udiv	r3, r2, r3
 8005846:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	2b0f      	cmp	r3, #15
 800584c:	d916      	bls.n	800587c <UART_SetConfig+0x19c>
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005854:	d212      	bcs.n	800587c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	b29b      	uxth	r3, r3
 800585a:	f023 030f 	bic.w	r3, r3, #15
 800585e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	085b      	lsrs	r3, r3, #1
 8005864:	b29b      	uxth	r3, r3
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	b29a      	uxth	r2, r3
 800586c:	89fb      	ldrh	r3, [r7, #14]
 800586e:	4313      	orrs	r3, r2
 8005870:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	89fa      	ldrh	r2, [r7, #14]
 8005878:	60da      	str	r2, [r3, #12]
 800587a:	e04f      	b.n	800591c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	77bb      	strb	r3, [r7, #30]
 8005880:	e04c      	b.n	800591c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005882:	7ffb      	ldrb	r3, [r7, #31]
 8005884:	2b08      	cmp	r3, #8
 8005886:	d828      	bhi.n	80058da <UART_SetConfig+0x1fa>
 8005888:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <UART_SetConfig+0x1b0>)
 800588a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588e:	bf00      	nop
 8005890:	080058b5 	.word	0x080058b5
 8005894:	080058bd 	.word	0x080058bd
 8005898:	080058c5 	.word	0x080058c5
 800589c:	080058db 	.word	0x080058db
 80058a0:	080058cb 	.word	0x080058cb
 80058a4:	080058db 	.word	0x080058db
 80058a8:	080058db 	.word	0x080058db
 80058ac:	080058db 	.word	0x080058db
 80058b0:	080058d3 	.word	0x080058d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058b4:	f7fe fad0 	bl	8003e58 <HAL_RCC_GetPCLK1Freq>
 80058b8:	61b8      	str	r0, [r7, #24]
        break;
 80058ba:	e013      	b.n	80058e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058bc:	f7fe faee 	bl	8003e9c <HAL_RCC_GetPCLK2Freq>
 80058c0:	61b8      	str	r0, [r7, #24]
        break;
 80058c2:	e00f      	b.n	80058e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058c4:	4b20      	ldr	r3, [pc, #128]	; (8005948 <UART_SetConfig+0x268>)
 80058c6:	61bb      	str	r3, [r7, #24]
        break;
 80058c8:	e00c      	b.n	80058e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ca:	f7fe fa4f 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 80058ce:	61b8      	str	r0, [r7, #24]
        break;
 80058d0:	e008      	b.n	80058e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058d6:	61bb      	str	r3, [r7, #24]
        break;
 80058d8:	e004      	b.n	80058e4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	77bb      	strb	r3, [r7, #30]
        break;
 80058e2:	bf00      	nop
    }

    if (pclk != 0U)
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d018      	beq.n	800591c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	085a      	lsrs	r2, r3, #1
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	441a      	add	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b0f      	cmp	r3, #15
 8005902:	d909      	bls.n	8005918 <UART_SetConfig+0x238>
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800590a:	d205      	bcs.n	8005918 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	b29a      	uxth	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60da      	str	r2, [r3, #12]
 8005916:	e001      	b.n	800591c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005928:	7fbb      	ldrb	r3, [r7, #30]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3720      	adds	r7, #32
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	efff69f3 	.word	0xefff69f3
 8005938:	40013800 	.word	0x40013800
 800593c:	40021000 	.word	0x40021000
 8005940:	40004400 	.word	0x40004400
 8005944:	40004800 	.word	0x40004800
 8005948:	007a1200 	.word	0x007a1200

0800594c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01a      	beq.n	8005a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a4a:	d10a      	bne.n	8005a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	605a      	str	r2, [r3, #4]
  }
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b098      	sub	sp, #96	; 0x60
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aa0:	f7fb fbae 	bl	8001200 <HAL_GetTick>
 8005aa4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d12e      	bne.n	8005b12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005abc:	2200      	movs	r2, #0
 8005abe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f88c 	bl	8005be0 <UART_WaitOnFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d021      	beq.n	8005b12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ae2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aec:	647b      	str	r3, [r7, #68]	; 0x44
 8005aee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e6      	bne.n	8005ace <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e062      	b.n	8005bd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d149      	bne.n	8005bb4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f856 	bl	8005be0 <UART_WaitOnFlagUntilTimeout>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d03c      	beq.n	8005bb4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	623b      	str	r3, [r7, #32]
   return(result);
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b58:	633b      	str	r3, [r7, #48]	; 0x30
 8005b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e6      	bne.n	8005b3a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3308      	adds	r3, #8
 8005b72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0301 	bic.w	r3, r3, #1
 8005b82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3308      	adds	r3, #8
 8005b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b8c:	61fa      	str	r2, [r7, #28]
 8005b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	69b9      	ldr	r1, [r7, #24]
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	617b      	str	r3, [r7, #20]
   return(result);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e5      	bne.n	8005b6c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e011      	b.n	8005bd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3758      	adds	r7, #88	; 0x58
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	603b      	str	r3, [r7, #0]
 8005bec:	4613      	mov	r3, r2
 8005bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf0:	e049      	b.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf8:	d045      	beq.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bfa:	f7fb fb01 	bl	8001200 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d302      	bcc.n	8005c10 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e048      	b.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d031      	beq.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	f003 0308 	and.w	r3, r3, #8
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d110      	bne.n	8005c52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2208      	movs	r2, #8
 8005c36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f838 	bl	8005cae <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2208      	movs	r2, #8
 8005c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e029      	b.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c60:	d111      	bne.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f81e 	bl	8005cae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e00f      	b.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	bf0c      	ite	eq
 8005c96:	2301      	moveq	r3, #1
 8005c98:	2300      	movne	r3, #0
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	79fb      	ldrb	r3, [r7, #7]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d0a6      	beq.n	8005bf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b095      	sub	sp, #84	; 0x54
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd4:	643b      	str	r3, [r7, #64]	; 0x40
 8005cd6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e6      	bne.n	8005cb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3308      	adds	r3, #8
 8005cee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	f023 0301 	bic.w	r3, r3, #1
 8005cfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3308      	adds	r3, #8
 8005d06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e5      	bne.n	8005ce8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d118      	bne.n	8005d56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f023 0310 	bic.w	r3, r3, #16
 8005d38:	647b      	str	r3, [r7, #68]	; 0x44
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d42:	61bb      	str	r3, [r7, #24]
 8005d44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	6979      	ldr	r1, [r7, #20]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e6      	bne.n	8005d24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d6a:	bf00      	nop
 8005d6c:	3754      	adds	r7, #84	; 0x54
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <memset>:
 8005d76:	4402      	add	r2, r0
 8005d78:	4603      	mov	r3, r0
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d100      	bne.n	8005d80 <memset+0xa>
 8005d7e:	4770      	bx	lr
 8005d80:	f803 1b01 	strb.w	r1, [r3], #1
 8005d84:	e7f9      	b.n	8005d7a <memset+0x4>
	...

08005d88 <__libc_init_array>:
 8005d88:	b570      	push	{r4, r5, r6, lr}
 8005d8a:	4d0d      	ldr	r5, [pc, #52]	; (8005dc0 <__libc_init_array+0x38>)
 8005d8c:	4c0d      	ldr	r4, [pc, #52]	; (8005dc4 <__libc_init_array+0x3c>)
 8005d8e:	1b64      	subs	r4, r4, r5
 8005d90:	10a4      	asrs	r4, r4, #2
 8005d92:	2600      	movs	r6, #0
 8005d94:	42a6      	cmp	r6, r4
 8005d96:	d109      	bne.n	8005dac <__libc_init_array+0x24>
 8005d98:	4d0b      	ldr	r5, [pc, #44]	; (8005dc8 <__libc_init_array+0x40>)
 8005d9a:	4c0c      	ldr	r4, [pc, #48]	; (8005dcc <__libc_init_array+0x44>)
 8005d9c:	f000 f818 	bl	8005dd0 <_init>
 8005da0:	1b64      	subs	r4, r4, r5
 8005da2:	10a4      	asrs	r4, r4, #2
 8005da4:	2600      	movs	r6, #0
 8005da6:	42a6      	cmp	r6, r4
 8005da8:	d105      	bne.n	8005db6 <__libc_init_array+0x2e>
 8005daa:	bd70      	pop	{r4, r5, r6, pc}
 8005dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db0:	4798      	blx	r3
 8005db2:	3601      	adds	r6, #1
 8005db4:	e7ee      	b.n	8005d94 <__libc_init_array+0xc>
 8005db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dba:	4798      	blx	r3
 8005dbc:	3601      	adds	r6, #1
 8005dbe:	e7f2      	b.n	8005da6 <__libc_init_array+0x1e>
 8005dc0:	08005e20 	.word	0x08005e20
 8005dc4:	08005e20 	.word	0x08005e20
 8005dc8:	08005e20 	.word	0x08005e20
 8005dcc:	08005e24 	.word	0x08005e24

08005dd0 <_init>:
 8005dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd2:	bf00      	nop
 8005dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd6:	bc08      	pop	{r3}
 8005dd8:	469e      	mov	lr, r3
 8005dda:	4770      	bx	lr

08005ddc <_fini>:
 8005ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dde:	bf00      	nop
 8005de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de2:	bc08      	pop	{r3}
 8005de4:	469e      	mov	lr, r3
 8005de6:	4770      	bx	lr
